[
  {
    "offering_time": "T0",
    "code": "COMP2521",
    "name": "Data Structures and Algorithms",
    "url": "https://cgi.cse.unsw.edu.au/~cs2521/19T3/admin/outline/index.php",
    "outline": "The goal of this course is\nto deepen your understanding of data structures and algorithms\nand how these can be employed effectively\nin the design of software systems.\nIt is an important course in covering\na range of core data structures and algorithms\nthat will be used in context in later courses.\nYou explore these ideas in lectres, tutorials, lab classes, and assignments.\nAssessment involves labs, tutes, practical lab exams, a practical final exam, and a theory exam.\nAt the end of the course, we want you to be a solid programmer, with knowledge of a range of useful\ndata structures and programming techniques, capable of building significant\nsoftware systems in a team environment, and ready to continue with further specialised studies in computing.Topics:\nAn introduction the structure, analysis and usage\nof a range of fundamental data types and\nthe core algorithms that operate on them, including:\nalgorithm analysis, sorting, searching, trees,\ngraphs, files, algorithmic strategies,\nanalysis and measurement of programs.\nLabs and programming assignments in C,\nusing a range of Unix tools.Executive SummaryA summary of the critical things to know about COMP2521:attempt all of the labs, tutorials, and assignments yourselfalways try to produce a better program than last timein lectures, think critically about what's being said/shownthe textbook is a useful reference source beyond this courseassessment: labs: 8%, assignments: 22%, midterm exam: 10%, final exam: 60%enjoy the course!Now, please read the rest of this document.Course TimetableThe complete course timetable is available at:webcms3:/timetableCourse AimsThe aim of this course is\nto get you tothink like a computer scientist.\nThis certainly sounds like a noble goal...\nbut what does it really mean?\nHow does ascientist,\nlet alone a computer scientist,\nactually think?What many types of scientists try to do\nis understand natural systems and processes:\na geologist, for example,\ntries to understand the structure of the earth;\na biologist tries to understand living organisms;\na chemist tries to understand materials and reactions,\nand so on.Computer scientists don't,\nas the name might suggest,\nsimply try to understand\nthe structure and behaviour of computers,\nbut are more concerned with\nunderstanding software systems\n(and the interaction between\nthe software and the hardware on which it runs).\nAlso, unlike other scientists,\ncomputer scientists frequently build\nthe objects that they study.During this course, we'll be looking at\nways of creating, analysing and understanding software.\nUltimately, you should be able to answer the question,is this piece of software any good?and be able to provide sound reasons to justify your answer.This course follows on from introductory C programming courses:\nCOMP1511, COMP1917, or COMP1921.\nWe cover additional aspects of the C programming language\nthat were not covered in those courses,\nand also look at some programming tools\nwhich were not covered (in detail) earlier.\nHowever, this course is not simply\na second C programming course:\nthe focus is on the ideas and abstractions\nbehind the data structures and algorithms that are used.COMP2521 is a critical course\nin the study of computing at UNSW,\nsince it deals with many concepts that are\ncentral to future studies in the area.\nWhether you are studying Computer Science,\nSoftware Engineering, Bioinformatics,\nComputer Engineering,\nor even a discipline outside the realm of computing,\nunderstanding a range of algorithms and data structures\nand how to use them\nwill make you a much more effective\ncomputing problem solver in the future.Student Learning Outcomes"
  },
  {
    "offering_time": "T0",
    "code": "COMP3331",
    "name": "Computer Networks&Applications (U1B)",
    "outline": "This course is an introductory course on computer networks, aimed at students with a background in computer science / electrical engineering. We will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of(1) medium access control, congestion control, flow control, and reliable transmission,(2) addressing and naming,(3) routing and switching,(4) widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.(5) security threats and common defensive techniques, and(6) special purpose networks such as content delivery networks, peer-to-peer networks and wireless networks.This is a combined undergraduate and postgraduate course.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3331/19T3/outline"
  },
  {
    "offering_time": "T0",
    "code": "COMP3411",
    "name": "Artificial Intelligence (U1B)",
    "outline": "Give a brief summary for why this course is relevant, where it fits in the \n  degree(s), and its aims ...",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3411/19T1/outline"
  },
  {
    "offering_time": "T0",
    "code": "COMP3511",
    "name": "Human Computer Interaction (U1B)",
    "url": "https://www.cse.unsw.edu.au/~cs3511/HCICourseOutline2019-V1.pdf",
    "outline": ""
  },
  {
    "offering_time": "T0",
    "code": "COMP3901",
    "name": "Special Project A",
    "url": "http://www.cse.unsw.edu.au/~morri/specialProject.html",
    "outline": ""
  },
  {
    "offering_time": "T0",
    "code": "COMP6448",
    "name": "Security Masterclass (U1B)",
    "url": ""
  },
  {
    "offering_time": "T0",
    "code": "COMP6451",
    "name": "Cryptocurrency and DLT",
    "url": "http://www.cse.unsw.edu.au/~cs6451/",
    "outline": "The course aims to develop an understanding of the requirements for\nelectronic payment systems and how these requirements are realised\nusing distributed ledger technologies. The technical ideas to be\nunderstood include the key cryptographic constructs, economic\nincentive mechanisms and distributed algorithms underpinning\ncryptocurrencies such as Bitcoin and Ethereum. The concept of smart\ncontract will be introduced, and the course aims to develop a basic\nfacility with programming smart contracts on one cryptocurrency\nplatform. The course also aims to introduce students to the broader\ncontext of the range of alternate designs for distributed ledger\ntechnologies, the range of potential applications for these\ntechnologies, and the socio-economic, ethical and legal dimensions of\ntheir use."
  },
  {
    "offering_time": "T0",
    "code": "COMP9024",
    "name": "Data Structures & Algorithms",
    "outline": "Data structures are about how data is stored inside a computer for effective and efficient use. An algorithm is a step-by-step process for solving a problem within a finite amount of space and time. Data structures and algorithms are not only important in software design, but also in hardware design. Being proficient in data structures and algorithms are essential for good software developers, hardware developers, and system architects.The actual content is taken from a list of subjects that constitute the basis of the tool box of every serious practitioner of computing: data types and data structures, abstract data types, dynamic data structures, analysis of algorithms and a variety of fundamental algorithms for graphs, trees and text processing.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9024/19T3/outline"
  },
  {
    "offering_time": "T0",
    "code": "COMP9331",
    "name": "Computer Networks&Applications (U1B)",
    "outline": "This course is an introductory course on computer networks, aimed at students with a background in computer science / electrical engineering. We will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of(1) medium access control, congestion control, flow control, and reliable transmission,(2) addressing and naming,(3) routing and switching,(4) widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.(5) security threats and common defensive techniques, and(6) special purpose networks such as content delivery networks, peer-to-peer networks and wireless networks.This is a combined undergraduate and postgraduate course.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3331/19T2/outline"
  },
  {
    "offering_time": "T0",
    "code": "COMP9414",
    "name": "Artificial Intelligence (U1B)",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9414/19T1/outline",
    "private": true
  },
  {
    "offering_time": "T0",
    "code": "COMP9511",
    "name": "Human Computer Interaction (U1B)",
    "url": "https://www.cse.unsw.edu.au/~cs3511/HCICourseOutline2019-V1.pdf",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP1511",
    "name": "Programming Fundamentals",
    "url": "https://www.cse.unsw.edu.au/~cs1511/19T3/resources/outline.html",
    "outline": "This course introduces students to the basics of programming.\nTopics covered include:fundamental programming conceptsthe C programming language and use of a C compilerprogramming styleprogram design and organisation conceptsprogram testing and debuggingCourse AimsThe course aims for students to become proficient in programming using a high\nlevel language, C.\n\nBy the end of the course, students should be able to\nconstruct C programs to solve problems.Course Learning Outcomesunderstand the core syntax and semantics of the C programming language including\ntypes, I/O, arrays, functions, pointers, structs and dynamic memory allocationgiven a problem, solve it by proficiently constructing (designing, testing,\ndebugging) a secure, reliable and correct C programunderstand and employ fundamental data structures including arrays and\nlinked listsuse Linux and Unix-like operating systems to develop and test softwareCOMP1511 versus COMP1911COMP1511 is designed for computer science majors, and for any student\nwith a keen interest in computing, regardless of their degree program.COMP1911 is for students who are not computer science majors.\nCOMP1911 covers a subset of the material in COMP1511 and moves at a more\ngentle pace.If you are a computer science major, you must take COMP1511If you are not a computer science major, but have an interest in computer\nscience and think you may take further COMP courses, you also should enrol in\nCOMP1511And if you have previous programming experience -and enjoyed it- choose COMP1511Course ScheduleWeek 1Course Introduction, Compiling and Running C Programs,\n    Variables, Simple input and output, If statementsWeek 2Continuing If statements,\n    Boolean Expressions,\n\tLoops,\n\tProblem SolvingWeek 3Loops,\n\tNested Loops,\n\tMemory and Arrays,\n\tCode ReviewsWeek 4More Arrays,\n    Characters and Strings,\n    FunctionsWeek 5Pointers and Memory,\n    DebuggingWeek 6Structs and Pointers,\n    ProfessionalismAssignment 1dueWeek 7Multi-file projects,\n    Memory Allocation,\n    Linked ListsWeek 8Linked ListsWeek 9Abstract data types & Interfaces,\n\tStacks and Queues,Week 10Revision,\n    Exam preparationAssignment 2dueExam PeriodFinal ExamTopics including development approaches, programming style, testing, debugging\nstrategies and ethics will be discussed though the course as they arise.Teaching RationaleThis course has a heavy practical orientation.  Lectures will revolve\naround live demonstrations of programming and use of tools.\nLabs and assignments form a key part.On top of this, the course is not just about the specific technical\naspects of Programming, but also a preparation for studying Computer Science\nand the thought processes and skills necessary for a career in the field.Teaching StrategiesLecturesLectures will be used to present the theory and\npractice of the techniques and tools in this course. There will be\nextensive use of  practical demonstrations during\nlectures. Lecture notes will be available on the course web pages\nbefore each lecture.TutorialsFrom week 1 you will also be expected to attend a one-hour tutorial\nsession to clarify ideas from lectures and work through exercises\nbased on the lecture material. You should make sure that you use them\neffectively by examining in advance the material to be covered in each\nweek's tutorial, by asking questions, by offering suggestions and by generally\nparticipating. The tutorial questions will be posted on the Web in the\nweek before each tutorial.  There are no marks for tutorial attendance.Laboratory ClassesFollowing the tutorial class each week, there will be a two-hour laboratory class,\nduring which you will work on a variety of small practical problems\ninvolving the tools introduced in lectures.\nBecause this course is practical in nature, laboratory classes are a very\nimportant component. If you do not put a great deal of effort into the lab classes\nyou risk failing the final exam.Each week, there will be several exercises to work on. These exercises will be\nreleased in the week preceding the lab class.Most lab exercises will be done in\npairs, and you and you partner should discuss the exercises before the lab to\nmaximise the usefulness of the class.Tutors  will facilitate you forming pairs in your week 1 lab (which is not\nassessed). The pairs will change twice during session.Starting week 3, pairs will also be asked to do code reviews in the tutorials,\nto explain how they tackled a particular problem and describe interesting\nfeatures of their solution.OverviewLab exercises will be automarked (marked automatically by a computer),\nso that tutors can spend lab time assisting students rather than marking\nlabs.SubmissionFor each of the lab exercises,bothmembers of each lab pair need\nto submit the exerciseseparatelyusinggive.You cannot obtain marks by e-mailing lab work to tutors or lecturers.If you cannot complete the exercise by the end of the lab\nyou may complete it in your own time and submit it using thegivecommandbefore 5pm Monday(Monday 17:00).Challenge ExercisesChallenge exercises may be specified for some labs.Some challenge lab exercises typically will specify that they are individual\nexercises (not to be done with your partner).Challenge exercises may be silly, confusing or unreasonably difficult.Do not worry if you can not complete challenge exercises.Lab MarkingLab exercises will be automarked, using test cases that you haven't seen:\ndifferent to the test casesautotestruns for\nyou.\n\n(Hint: do your own testing as well as runningautotest)There will be partial marks for attempts which fail some of these\nautomated tests.AutomarkingAutomarking will be run several days after the submission deadline\nfor the lab. When it  is complete you should be able toview it hereor by running this command on a CSE machine:1511 classrun -collect exercise_nameLab MarksWhen all components of a lab  are automarked you should be able to view the\nthe marksvia give's web interfaceor by running this command on a CSE machine:1511 classrun -sturecThere will be more lab marks available than necessary\nto obtain full marks for the 13% lab component.\nIn other words: total lab marks will be capped.The lab exercises for week are worth in total 2 marks.Except there are no marks for the week 1 lab.Usually each lab exercise will be worth the same - for example if\nthere are 5 lab exercises each will be worth 0.4 marks.Except challenge exercises (see below) will never total more than 20% of each week's lab mark.The best 8 of your 9 lab marks for weeks 2-10, will be summed to give you a mark out of 13.If their sum exceeds 13 - your total mark will be capped at 13.Hence:You can miss 1 lab without affecting your mark.You can obtain full marks for the lab component without doing any challenge exercises.Help SessionsThere will be consultation sessions starting in week 2 where tutors will be \navailable for one on one help with\nspecific problems and assignment clarification. These sessions are optional and \nwill run at different times during the week, with more sessions available \naround assignment deadlines and in later weeks of the term. Check the course\ntimetable for what Help Sessions have been scheduled.Live StreamingLive Streaming sessions that you can join from your own computer will be run at\nspecific times in the term when help is needed.\nThese will involve some live problem solving and coding that will \nanswer frequently asked questions as well as show some more examples of specific\ncoding based on student requests. Live participation will allow students to ask\nquestions during the sessions.\nThese sessions will be recorded and available for viewing after they're streamed.\nCheck the course website for a stream schedule.Weekly Coding TestsThere will be 8 weekly coding tests from weeks 3-10 designed to give you timely\n& realistic feedback of your understanding of the course material.These will be conducted in your own time under self-enforced exam-like conditions.Each test will specify the conditions but typically these will includeNo assistance from any person.A time limit (1 hour).No access to materials (written or online) except specified language\n    documentation or man pages.Each coding test will be automatically marked. There will be partial marks for\nattempts which do not pass automatic tests.\n\nHere is an indicative guide:Passes all automatic tests.1/1Fails several automatic tests.0.75/1otherwise0.5/1Your mark for the coding test component will be the sum of your best 7 of 8 test marks.Any deliberate violation of the test conditions will result in a mark of zero\nfor the entire programming test component.The weekly programming test must be completed by Thursday 5pm the week after it is released.AssignmentsThere are two assessable programming assignments. Assignments give you the\nchance to practice what you have learned on relatively large problems (compared\nto the small exercises in the labs).\n\nAssignments are a very important part of this course, therefore it is essential\nthat you attempt them yourself.Assignment 1 (Submission, Week 6)   13%Assignment 2 (Submission, Week 10)  13%The assignment weighting and deadlines may change a little when the assignment\ndesigns are complete.Late assignments submissions will be penalized.  The exact penalty will be\nspecified in the assignment specification - typically it is 2% reduction in maximum\nmark for every hour late.Final ExamThere will be a three-hour primarily practical exam, to be held in the CSE labs\nduring the exam period.  This will be centrally timetabled and appear\nin your UNSW exam timetable.It will contain implementation tasks which will require you to write C programs.\nIt will also contain sections which require you to read code or answer questions.During this exam you will be able to execute, debug and test your answers.\nThe implementation tasks will be similar to those encountered in lab exercisesAssessmentComponentWeightLab Work13%Weekly Tests7%Assignments26%Final Exam  (exam period)54%Supplementary AssessmentStudents will be offered a supplementary exam if they miss the original\nexam due to (documented) illness or misadventure. Applications for Special\nConsideration are handled by UNSW Student Support and Services, not by\nsubject staff.The supplementary exam is scheduled for the week of the 13-17th January 2020.\nIt is your responsibility to be in Sydney and available for the supplementary exam.\nNo alternative will be offered.Student ConductThe Student Code of Conduct (Information,Policy)\nsets out what the University expects from students as members of the UNSW\ncommunity.\n\nAs well as the learning, teaching and research environment, the\nUniversity aims to provide an environment that enables students to achieve\ntheir full potential and to provide an experience consistent with the\nUniversity's values and guiding principles.\n\nA condition of enrolment is that\nstudents inform themselves of the University's rules and policies affecting\nthem, and conduct themselves accordingly.In particular, students have the responsibility to observe standards of equity\nand respect in dealing with every member of the University community.\n\nThis applies to all activities on UNSW premises and all external activities\nrelated to study and research. This includes behaviour in person as well as\nbehaviour on social media, for example Facebook groups set up for the purpose of\ndiscussing UNSW courses or course work.\n\nBehaviour that is considered in breach of the Student Code Policy as\ndiscriminatory, sexually inappropriate, bullying, harassing, invading another's\nprivacy or causing any person to fear for their personal safety is serious\nmisconduct and can lead to severe penalties, including suspension or exclusion\nfrom UNSW.If you have any concerns, you may raise them with your lecturer, or approach\ntheSchool Ethics Officer,Grievance Officer,\nor one of the student representatives.All work submitted for assessment must be your own work.Lab exercises must be completed by you and your partner.Assignments must be completedindividually.Submission of other people's work as your own (plagiarism) has a major impact on\nlearning so we use plagiarism detection software to search for\nmultiply-submitted work.Please note:Submitting part or all of other students' work, with or without acknowledgement,\nis not acceptable.Submitting work written even partly by another person is also not acceptable.Building on ideas and code snippets obtained from public sources, e.g. Stack\nOverflow, is acceptable (unless the assignment/lab forbids this) provided full\nacknowledgement of their resources is made.Discussing approaches to exercises and assignments with other students is quite\nappropriate, but any discussions should remain at the design level, and must not\ninclude program text. Comparison tools will detect any common code across\nthe student body and previous iterations of the course.The safest approach is to work diligently on your own, seeking help from the\nforum or course staff.Submission of work derived from another person, or jointly written with someone\nelse will result in loss of marks and your name being entered on UNSW's\nplagiarism register.\nThis loss of marks often results in the student failing the course.Providing your work to another person will also result in the loss of marks\nand your name being entered on UNSW's plagiarism register.\nDo not provide your work to any other person, even people who are not UNSW students.\nYou will be held responsible for the actions of anyone you provide your work to.Severe or second offences may result in automatic failure or exclusion from UNSW.Make sure you read:the Learning Centre'sexplanation of plagiarism.UNSW's policy regarding academic honesty and plagiarismOther mattersOccupational Health and Safety policiesInformation for students with disabilitiesContact the lecturer ASAP if you have any disabilities that may affect this course.Course Evaluation and DevelopmentEvery semester, COMP1511 student feedback is requested in a survey at the\nend of this course using UNSW's myExperience online survey system.This feedback is used to improve the course materials and their delivery.In the most recent session feedback was very favourable probably as a result of\nchanges based on the previous session's feedback.\n\nFeedback from surveys for COMP1511's previous offerings has resulted in\nchanges to COMP1511 delivery, including introduction of weekly programming tests.\n\nSome lab exercises and lecture topics will be updated to better reflect current\npractice.Students are also encouraged to provide informal feedback during the session,\nand to let the lecturer in charge know of any problems, as soon as they arise.\n\nSuggestions will be listened to very openly, positively, constructively, and\nthankfully, and every reasonable effort will be made to address them.Resources for StudentsNo textbook is required for COMP1511.The optional textbook for the course is:Programming, Problem Solving, and Abstraction with Cby Alistair Moffat,ISBN978\u00a01\u00a074103\u00a0080\u00a03,\nwhich can be purchased from the UNSW Bookshop.COMP1511 19T3: Programming Fundamentalsis brought to you bytheSchool of Computer Science and Engineeringat theUniversity of New South Wales, Sydney.For all enquiries, please email the class account atcs1511@cse.unsw.edu.auCRICOS Provider 00098G"
  },
  {
    "offering_time": "T1",
    "code": "COMP1531",
    "name": "Software Eng Fundamentals",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP1531/19T3/outline"
  },
  {
    "offering_time": "T1",
    "code": "COMP1911",
    "name": "Computing 1A",
    "url": "https://cgi.cse.unsw.edu.au/~cs1911/19T1/CourseOutline.html",
    "outline": "fundamental programming conceptsthe C programming language & use of a C compilerprogramming styleprogram design and organisation conceptsprogram testing and debuggingCourse AimsThe course aims for students to become proficient in programming using a high level language, C.\nBy its completion that should be able to construct C programs to solve problems.Student Learning OutcomesLO1: Understand fundamental procedural programming concepts including basic data representation.LO2: Design, implement, test and debug complete C programs to solve specified problems.LO3: Understand good practice for program organsation and programming style.This course contributes to the development of the following graduate capabilities:Graduate CapabilityAcquired inScholars capable of independent and collaborative enquiry, rigorous in their analysis, critique and reflection, and able to innovate by applying their knowledge and skills to the solution of novel as well as routine problemstutorials, labs and assignmentsProfessionals capable of ethical, self- directed practice and independent lifelong learninglabs,assignmentsGlobal citizens who are culturally adept and capable of respecting diversity and acting in a socially just and responsible waylectures, tutorials, labsTeaching RationaleThis course has a heavy practical orientation.  Lectures will revolve\naround live demonstrations of programming and use of tools.\nLabs & assignments form a key part.Teaching StrategiesLecturesLectures will be used to present the theory and\npractice of the techniques and tools in this course. There will be\nextensive use of  practical demonstrations during  \nlectures. Lecture notes will be available on the course web pages\nbefore each lecture. Lecture recordings will be available online a short time after the actual lectures.TutorialsFrom week 1 you will also be expected to attend a one-hour tutorial\nsession to clarify ideas from lectures and work through exercises\nbased on the lecture material. You should make sure that you use them\neffectively by examining in advance the material to be covered in each\nweek's tute, by asking questions, by offering suggestions and by generally\nparticipating. The tutorial questions will be posted on the Web in the\nweek before each tute.  There are no marks for tutorial attendance.Laboratory ClassesFollowing the tute class each week, there will be a two-hour lab class,\nduring which you will work on a variety of small practical problems\ninvolving the tools introduced in lectures.\nBecause this course is practical in nature, lab class are a very\nimportant component, and you should make every effort to attend \nthe labs and complete the exercises diligently.\nIn particular,keep up-to-datewith the Lab work; if you fall\nbehind it affects your ability to understand later material in the\ncourse.To obtain a mark for a lab exercise you must both demonstrate the completed lab exercise to your tutor during a lab class and submit it using give.If you don't complete a lab exercise during the scheduled class, you can still obtain the mark if you both submit the completed exercises before midnight Sunday and you demonstrate it to you tutor in the follow week's lab.Lab exercises will be assessed using the following grade system:GradeMarkCriteriaA+1.25Complete, correct solution with perfect styleA1Competent solution to core part of lab -  any problems or bugs must be minorB0.5Incomplete solution, or complete with significant defects or obvious bugsC0.25Partial solution only, minimal achievement; or inability to explain solutionD or .0Not attemptedChallenge exercises are optional to attempt/complete. Completing challenge exercises can help boost your lab mark. For example, if you get an A for all non-challenge exercises (because you made a couple of mistakes), then if you also complete the challenge exercise that can be your path to an A+ instead of further improving the other non-challenge exercises.Your lab marks (there will be 9 labs in total) will be summed and capped at 8 marks. These 8 marks will contribute 10% of your overall course mark as per the assessment section below.AssignmentsThere are two assessable programming assignments. Assignments give you the chance to practice what you have learnt on relatively large problems (compared to the small exercises in the labs). Assignments are a very important part of this course, therefore it is essential that you attempt them yourself.Assignment 1 (Submission, Week 5) \t15%Assignment 2 (Submission, Week 9) \t15%The deadlines may be slightly varied when the assignment designs are complete\nand to fit best with the lecture schedule.Late programming assignments will be penalized.  The exact penalty will be \nspecified in the assignment specification - often it is 2% reduction in maximum\nmark for every hour late.ExamThere will be a three-hour exam, to be held in the CSE labs\nduring the exam period.\nIt consists of  small implementation tasks which will require you to write C programs,\nand some theory questions. All questions will be answered and submitted on a computer. There is no handwritten component.During this exam you will be able to execute, debug and test your programs.\nThe implementation tasks will be similar to those encountered in lab exercisesIt  is a hurdle requirement for this course that you perform satisfactorily\non the implementation tasks in the exam.  Satisfactory performance is\ndefined as  solving two of the small implementation tasks.The exact  exam format (exam skeleton) will be released in week 13\nbut it is likely there will be 4 implementation tasks.AssessmentComponentValueContributes to Learning OutcomesLab Work10%LO1,LO2,LO3Assignments30%LO1,LO2,LO3Exam60%LO1As mentioned above, your performance on the practical component\nof the final exam must also be satisfactory to pass the course.The lecturer may scale overall marks, or individual components, up or down to\nobtain a desired mark distribution (don't panic - scaling marks down is very rare).Supplementary ExamsThe document\"Essential Advice for CSE Students\"states the supplementary assessment policy for the School of CSE. Please take the time to read it carefully.If you are granted a Supplementary examination, then it will be held on the date specified in the above document. If you think that you may be eligible for a supplementary exam, then make sure you are available on that day. It is your responsibility to check at the School Office for details of Supplementary examinations.Content cheduleThe following content schedule is a draft only and is subject to change throughout the session.Week 1Introduction, C BasicsWeek 2Numeric Types and C conditionsWeek 3Loops & FunctionsWeek 4ArraysWeek 5Characters and StringsWeek 6Pointers and memoryWeek 7StructsWeek 8Stacks and queuesWeek 10Bonus / Extension contentWeek 11Exam RevisionCourse evaluation and developmentEvery semester, COMP1911 Student feedback is requested in a survey at the end of this course\nusing UNSW's CATEI online survey system.This feedback is used to improve the course materials & their delivery.Feedback from the last year was very positive. However it was suggested to provide more and better access to sample code and better practice material for the exam.Resources for StudentsInformation for students with disabilitiesTalk to  the lecturer  if you have any disabilities that may affect this course.The optional textbook for the course is:Alistair Moffat,Programming, Problem Solving, and Abstraction with C,Pearson Education, 2012.For pointers to other useful reading material, including documentation\nfor all of the tools used in the practical work, see the course Web pages.Academic Honesty and PlagiarismUNSW has an ongoing commitment to fostering a culture of learning informed by academic integrity. All UNSW staff and students have a responsibility to adhere to this principle of academic integrity. Plagiarism undermines academic integrity and is not tolerated at UNSW. Plagiarism at UNSW is defined as using the words or ideas of others and passing them off as your own.If you haven't done so yet, please take the time to read the full text ofUNSW's policy regarding academic honesty and plagiarismThe pages below describe the policies and procedures in more detail:Student Code PolicyPlagiarism Policy StatementPlagiarism ProcedureStudent Misconduct ProcedureAll work submitted for assessment must be your own work.Lab exercises and assignments must be completedindividually.\nWe regard copying of\nassignments or lab exercises, in whole or part, as a very serious offence.\nWe use plagiarism detection software to search for\nmultiply-submitted work.Submitting part or all of other students' work, with or without acknowledgement, is not acceptable.Submitting solutions written by other persons is also not acceptable.Building on ideas and partial solutions obtained from public sources, such as web resources, may be acceptable, provided full acknowledgement is made. However, the final mark will take into account the starting point and how much development work would have been required. Failing to acknowledge web or other resources is unacceptable.Discussing approaches to solutions with other students is quite appropriate, but any discussions should remain at the design level, and must not include program text. Comparison tools will detect any common code across the student body.The safest approach is to work diligently on your own, seeking help from the forum or course staff."
  },
  {
    "offering_time": "T1",
    "code": "COMP2111",
    "name": "System Modelling and Design",
    "outline": "The course builds on the MATH1081 Discrete Mathematics course, examining the role of Mathematics in Computer Science.  The main focus will be on introducing students to formal modelling and specification and how they are used in Software Development.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP2111/19T1/outline"
  },
  {
    "offering_time": "T1",
    "code": "COMP2121",
    "name": "Microprocessors & Interfacing",
    "outline": "The aims of this course are to introduce students to the basic concepts and major components of microprocessors and micro controllers and to provide students with knowledge and skills for solving problems with microprocessors and micro-controllers.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP2121/19T2/outline"
  },
  {
    "offering_time": "T1",
    "code": "COMP2521",
    "name": "Data Structures and Algorithms",
    "url": "https://cgi.cse.unsw.edu.au/~cs2521/19T3/admin/outline/index.php",
    "outline": "The goal of this course is\nto deepen your understanding of data structures and algorithms\nand how these can be employed effectively\nin the design of software systems.\nIt is an important course in covering\na range of core data structures and algorithms\nthat will be used in context in later courses.\nYou explore these ideas in lectres, tutorials, lab classes, and assignments.\nAssessment involves labs, tutes, practical lab exams, a practical final exam, and a theory exam.\nAt the end of the course, we want you to be a solid programmer, with knowledge of a range of useful\ndata structures and programming techniques, capable of building significant\nsoftware systems in a team environment, and ready to continue with further specialised studies in computing.Topics:\nAn introduction the structure, analysis and usage\nof a range of fundamental data types and\nthe core algorithms that operate on them, including:\nalgorithm analysis, sorting, searching, trees,\ngraphs, files, algorithmic strategies,\nanalysis and measurement of programs.\nLabs and programming assignments in C,\nusing a range of Unix tools.Executive SummaryA summary of the critical things to know about COMP2521:attempt all of the labs, tutorials, and assignments yourselfalways try to produce a better program than last timein lectures, think critically about what's being said/shownthe textbook is a useful reference source beyond this courseassessment: labs: 8%, assignments: 22%, midterm exam: 10%, final exam: 60%enjoy the course!Now, please read the rest of this document.Course TimetableThe complete course timetable is available at:webcms3:/timetableCourse AimsThe aim of this course is\nto get you tothink like a computer scientist.\nThis certainly sounds like a noble goal...\nbut what does it really mean?\nHow does ascientist,\nlet alone a computer scientist,\nactually think?What many types of scientists try to do\nis understand natural systems and processes:\na geologist, for example,\ntries to understand the structure of the earth;\na biologist tries to understand living organisms;\na chemist tries to understand materials and reactions,\nand so on.Computer scientists don't,\nas the name might suggest,\nsimply try to understand\nthe structure and behaviour of computers,\nbut are more concerned with\nunderstanding software systems\n(and the interaction between\nthe software and the hardware on which it runs).\nAlso, unlike other scientists,\ncomputer scientists frequently build\nthe objects that they study.During this course, we'll be looking at\nways of creating, analysing and understanding software.\nUltimately, you should be able to answer the question,is this piece of software any good?and be able to provide sound reasons to justify your answer.This course follows on from introductory C programming courses:\nCOMP1511, COMP1917, or COMP1921.\nWe cover additional aspects of the C programming language\nthat were not covered in those courses,\nand also look at some programming tools\nwhich were not covered (in detail) earlier.\nHowever, this course is not simply\na second C programming course:\nthe focus is on the ideas and abstractions\nbehind the data structures and algorithms that are used.COMP2521 is a critical course\nin the study of computing at UNSW,\nsince it deals with many concepts that are\ncentral to future studies in the area.\nWhether you are studying Computer Science,\nSoftware Engineering, Bioinformatics,\nComputer Engineering,\nor even a discipline outside the realm of computing,\nunderstanding a range of algorithms and data structures\nand how to use them\nwill make you a much more effective\ncomputing problem solver in the future.Student Learning Outcomes"
  },
  {
    "offering_time": "T1",
    "code": "COMP3121",
    "name": "Algorithms & Programming Tech",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP3131",
    "name": "Programming Languages & Compil",
    "url": "https://www.cse.unsw.edu.au/~cs3131/19T1/Info/index.html",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP3153",
    "name": "Algorithmic Verification",
    "url": "http://www.cse.unsw.edu.au/~cs3153/20T1/outline.html",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP3211",
    "name": "Computer Architecture",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3211/19T1/outline",
    "private": true
  },
  {
    "offering_time": "T1",
    "code": "COMP3231",
    "name": "Operating Systems",
    "url": "http://cgi.cse.unsw.edu.au/~cs3231/intro.php",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP3311",
    "name": "Database Systems",
    "outline": "This course aims to explore in depth the practice of developing database applications and the theory behind relational database management systems (RDBMSs). It will also give an overview of the technologies used in implementing database management systems and the past, present and future of database systems and database research.Large data resources are critical to the functioning of just about every significant modern computer application. Hence, knowledge of how to manage them is clearly important to the IT industry. In the context of further study, understanding how to use databases effectively is essential for courses such asCOMP9321Data Services Engineering andCOMP9322Software Service Design and Engineering. COMP3311 also provides a foundation for further study in advanced database topics, such asCOMP9315Database Systems Implementation andCOMP9318Data Warehousing and Data Mining. Database concepts are also relevant in courses such asCOMP9319Web Data Compression and Search andCOMP6714Information Retrieval and Web Search.By the end of this course, we want you to be capable of building high-quality (correct, efficient, and usable) applications based on relational databases, to have a sound understanding of issues in administering relational database management systems, and have an overview of how they work internally.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3311/19T3/outline"
  },
  {
    "offering_time": "T1",
    "code": "COMP3331",
    "name": "Computer Networks&Applications",
    "outline": "This course is an introductory course on computer networks, aimed at students with a background in computer science / electrical engineering. We will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of(1) medium access control, congestion control, flow control, and reliable transmission,(2) addressing and naming,(3) routing and switching,(4) widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.(5) security threats and common defensive techniques, and(6) special purpose networks such as content delivery networks, peer-to-peer networks and wireless networks.This is a combined undergraduate and postgraduate course.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3331/19T3/outline"
  },
  {
    "offering_time": "T1",
    "code": "COMP3411",
    "name": "Artificial Intelligence",
    "outline": "Give a brief summary for why this course is relevant, where it fits in the \n  degree(s), and its aims ...",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3411/19T1/outline"
  },
  {
    "offering_time": "T1",
    "code": "COMP3891",
    "name": "Ext Operating Systems",
    "url": "http://cgi.cse.unsw.edu.au/~cs3231/intro.php",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP3900",
    "name": "Computer Science Project",
    "outline": "A capstone software project. Students work in teams to define, implement and evaluate a real-world software system. Most of the work in this course is team-based project work, although there are some introductory lectures on software project management and teamwork strategies. Project teams meet weekly with project mentors to report on the progress of the project. Assessment is based on a project proposal, a final project demonstration and report, and on the quality of the software system itself. Students are also required to reflect on their work and to provide peer assessment of their team-mates' contributions to the project.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9900/19T1/outline"
  },
  {
    "offering_time": "T1",
    "code": "COMP3901",
    "name": "Special Project A",
    "url": "http://www.cse.unsw.edu.au/~morri/specialProject.html",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP3902",
    "name": "Special Project B",
    "url": "http://www.cse.unsw.edu.au/~morri/specialProject.html",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP4141",
    "name": "Theory of Computation",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP4337",
    "name": "Securing Wireless Networks",
    "url": "http://www.cse.unsw.edu.au/~cs9337/CourseOutline-V1.pdf",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP4601",
    "name": "Design Project B",
    "outline": "COMP4601 is a team-based project development course involving the design and implementation of embedded and/or high performance and/or low power systems using FPGAs.Teams develop a solution to one of a number of suggested project problems. Project teams are expected to investigate possible approaches, develop their proposal, implement their design, present their solution, and to report on their investigation and implementation.The course involves lectures, seminars, lab exercises and project work. Lectures will provide some context for the problems being studied and some background on solution approaches. Students will prepare and assess seminars on related research publications. Project teams will present the results of their investigations and developments.Return to ToC",
    "url": "https://webcms3.cse.unsw.edu.au/COMP4601/19T1/outline"
  },
  {
    "offering_time": "T1",
    "code": "COMP4930",
    "name": "Thesis Part A",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP4931",
    "name": "Thesis Part B",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP4941",
    "name": "Thesis Part B",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP4951",
    "name": "Research Thesis A",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP4961",
    "name": "Computer Science Thesis A",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP4962",
    "name": "Computer Science Thesis B",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP4963",
    "name": "Computer Science Thesis C",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP6324",
    "name": "IoT Services Engineering",
    "url": "https://webcms3.cse.unsw.edu.au/static/uploads/course/COMP6324/19T1/631dd155aeed367453982611e08fa3c3dc676bb7031cdae6a59d0d295b123c94/COMP6324_Course_Outline_v2.8_-_published.pdf",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP6443",
    "name": "Web Application Security",
    "url": "https://webcms3.cse.unsw.edu.au/static/uploads/course/COMP6443/19T1/1136c95eb7873bb6aa7866c7933ac655bda339753c40f85b97ec7d9bad827c00/Web_Application_Security_v2.pdf",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP6452",
    "name": "Blockchain App Architecture",
    "outline": "A new course in a popular area, which complements the other new course in this space (COMP6451 Cryptocurrency and Distributed Ledger Technologies). It will be taught initially by the blockchain group from Data61 (Ingo Weber, Xiwei Xu, Mark Staples), who have established a strong reputation for their work in this area.This course addresses the knowledge that is needed in order to build applications based on blockchain technology, by offering an architectural view of software systems that make beneficial use of it. It provides guidance on assessing the suitability of blockchain, on the roles blockchain can play in an architecture, on designing blockchain applications, and on assessing different architecture designs and tradeoffs. It also serves as a reference on blockchain design patterns and design analysis, and refers to practical examples of blockchain-based applications.The course covers the following:a general introduction to the topic and to existing blockchain platforms including Bitcoin, Ethereum, and Hyperledger Fabric, and offers examples of blockchain-based applications;the functional aspects of software architecture are covered, describing the main roles blockchain can play in an architecture, as well as its potential suitability and design process;non-functional aspects of blockchain applications, which are often cross-cutting concerns including cost estimation, performance, security;Real-world use cases will be covered, offering additional insights from a practical perspective.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP6452/19T1/outline"
  },
  {
    "offering_time": "T1",
    "code": "COMP6843",
    "name": "Extended WebApp Security",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP9020",
    "name": "Foundations of Comp. Science",
    "outline": "The official scope is: mathematical methods for designing correct and \nefficient programs; mathematics for algorithm analysis; logic for \nproving and verification.The actual content is taken from a list of subjects that constitute \nthe basis of the tool box of every serious practitioner of computing: \nset and relation theory; induction, recursion and recurrence relations; \norder of growth of functions; structured counting (combinatorics); \ndiscrete probability; graph theory and trees for algorithmic \napplications; propositional logic and boolean algebras.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9020/19T3/outline"
  },
  {
    "offering_time": "T1",
    "code": "COMP9021",
    "name": "Principles of Programming",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9021/19T3/outline",
    "private": true
  },
  {
    "offering_time": "T1",
    "code": "COMP9024",
    "name": "Data Structures & Algorithms",
    "outline": "Data structures are about how data is stored inside a computer for effective and efficient use. An algorithm is a step-by-step process for solving a problem within a finite amount of space and time. Data structures and algorithms are not only important in software design, but also in hardware design. Being proficient in data structures and algorithms are essential for good software developers, hardware developers, and system architects.The actual content is taken from a list of subjects that constitute the basis of the tool box of every serious practitioner of computing: data types and data structures, abstract data types, dynamic data structures, analysis of algorithms and a variety of fundamental algorithms for graphs, trees and text processing.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9024/19T3/outline"
  },
  {
    "offering_time": "T1",
    "code": "COMP9101",
    "name": "Design &Analysis of Algorithms",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP9102",
    "name": "Programming Lang & Compilers",
    "url": "https://www.cse.unsw.edu.au/~cs3131/19T1/Info/index.html",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP9153",
    "name": "Algorithmic Verification",
    "url": "http://www.cse.unsw.edu.au/~cs3153/20T1/outline.html",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP9201",
    "name": "Operating Systems",
    "url": "http://cgi.cse.unsw.edu.au/~cs3231/intro.php",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP9211",
    "name": "Computer Architecture",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP9283",
    "name": "Ext Operating Systems",
    "url": "http://cgi.cse.unsw.edu.au/~cs3231/intro.php",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP9311",
    "name": "Database Systems",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9311/19T3/outline",
    "private": true
  },
  {
    "offering_time": "T1",
    "code": "COMP9318",
    "name": "Data Warehousing & Data Mining",
    "url": "http://www.cse.unsw.edu.au/~cs9318/20t1/index.html",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP9321",
    "name": "Data Services Engineering",
    "url": "https://webcms3.cse.unsw.edu.au/static/uploads/course/COMP9321/19T1/9ee17a6ddc007f6b1025ed043947a36850bbc42ccdfc3b8e4763215a3e38b730/CourseOutlines_2019T1.pdf",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP9322",
    "name": "Software Service Design & Eng",
    "url": "https://webcms3.cse.unsw.edu.au/static/uploads/course/COMP9322/19T1/27f3fc97f2c2d36a28ec8c46eb068560041dca9146b49b09d0b431c992e963d3/COMP9322_Syllabus_2019_v1.1.pdf",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP9331",
    "name": "Computer Networks&Applications",
    "outline": "This course is an introductory course on computer networks, aimed at students with a background in computer science / electrical engineering. We will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of(1) medium access control, congestion control, flow control, and reliable transmission,(2) addressing and naming,(3) routing and switching,(4) widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.(5) security threats and common defensive techniques, and(6) special purpose networks such as content delivery networks, peer-to-peer networks and wireless networks.This is a combined undergraduate and postgraduate course.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3331/19T2/outline"
  },
  {
    "offering_time": "T1",
    "code": "COMP9334",
    "name": "Systems Capacity Planning",
    "outline": "We live in a world that events do not happen instantly. It takes a certain amount of time to download a video from a server to your own mobile device. It takes a certain amount of time for a computer to finish the execution of an algorithm. The time to completion (or response time in performance analysis terminology) is a performance metric that computer scientists and computer engineers should be concerned about because no one wants to wait unnecessarily. If you can understand the factors that determine the response time, then you can influence those factors so that the response time is acceptable. This course will take a mathematical modelling and analytical approach to understand response time in computer systems and networks. The primary goal is to explore how mathematical modelling and mathematical methods can be used to model, analyse and design computer systems and networks so that they have good performance. There are three major topics that will be covered by this course:Queuing analysis (Note: Queues are important because they give rise to waiting time.)Discrete event simulationInteger programming for network design",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9334/19T1/outline"
  },
  {
    "offering_time": "T1",
    "code": "COMP9337",
    "name": "Securing Wireless Networks",
    "outline": "To provide an in-depth introduction to a wide range of topics in the field of Wireless Network Security. To get a hands-on understanding of the security issues in wireless networks. Assumed KnowledgeBefore commencing this course, students should:have completed COMP3331/9331<o:p></o:p>have programming skills acquired in other subjects.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9337/20T1/outline"
  },
  {
    "offering_time": "T1",
    "code": "COMP9414",
    "name": "Artificial Intelligence",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9414/19T1/outline",
    "private": true
  },
  {
    "offering_time": "T1",
    "code": "COMP9596",
    "name": "Research Project",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP9900",
    "name": "Info Tech Project",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9900/19T3/outline",
    "private": true
  },
  {
    "offering_time": "T1",
    "code": "COMP9901",
    "name": "P/T Res. Thesis Comp Sci & Eng",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP9902",
    "name": "Res. Thesis Comp Sci & Eng F/T",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "COMP9945",
    "name": "Research Project",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP1000",
    "name": "Web, Spreadsheets & Databases",
    "outline": "This course will explore fundamental concepts of the world wide web (www), spreadsheets and databases. We will explain in straightforward terms the concepts underlying www, spreadsheets and databases and their advantages so that students can exploit them effectively. Besides lectures, this course will have weekly labs. The labs will help you to put into practice the knowledge acquired from lectures; ultimately leading to the outcome that you will be able to develop web, spreadsheet and database applications.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP1000/18s1/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP1511",
    "name": "Programming Fundamentals",
    "url": "https://www.cse.unsw.edu.au/~cs1511/19T3/resources/outline.html",
    "outline": "This course introduces students to the basics of programming.\nTopics covered include:fundamental programming conceptsthe C programming language and use of a C compilerprogramming styleprogram design and organisation conceptsprogram testing and debuggingCourse AimsThe course aims for students to become proficient in programming using a high\nlevel language, C.\n\nBy the end of the course, students should be able to\nconstruct C programs to solve problems.Course Learning Outcomesunderstand the core syntax and semantics of the C programming language including\ntypes, I/O, arrays, functions, pointers, structs and dynamic memory allocationgiven a problem, solve it by proficiently constructing (designing, testing,\ndebugging) a secure, reliable and correct C programunderstand and employ fundamental data structures including arrays and\nlinked listsuse Linux and Unix-like operating systems to develop and test softwareCOMP1511 versus COMP1911COMP1511 is designed for computer science majors, and for any student\nwith a keen interest in computing, regardless of their degree program.COMP1911 is for students who are not computer science majors.\nCOMP1911 covers a subset of the material in COMP1511 and moves at a more\ngentle pace.If you are a computer science major, you must take COMP1511If you are not a computer science major, but have an interest in computer\nscience and think you may take further COMP courses, you also should enrol in\nCOMP1511And if you have previous programming experience -and enjoyed it- choose COMP1511Course ScheduleWeek 1Course Introduction, Compiling and Running C Programs,\n    Variables, Simple input and output, If statementsWeek 2Continuing If statements,\n    Boolean Expressions,\n\tLoops,\n\tProblem SolvingWeek 3Loops,\n\tNested Loops,\n\tMemory and Arrays,\n\tCode ReviewsWeek 4More Arrays,\n    Characters and Strings,\n    FunctionsWeek 5Pointers and Memory,\n    DebuggingWeek 6Structs and Pointers,\n    ProfessionalismAssignment 1dueWeek 7Multi-file projects,\n    Memory Allocation,\n    Linked ListsWeek 8Linked ListsWeek 9Abstract data types & Interfaces,\n\tStacks and Queues,Week 10Revision,\n    Exam preparationAssignment 2dueExam PeriodFinal ExamTopics including development approaches, programming style, testing, debugging\nstrategies and ethics will be discussed though the course as they arise.Teaching RationaleThis course has a heavy practical orientation.  Lectures will revolve\naround live demonstrations of programming and use of tools.\nLabs and assignments form a key part.On top of this, the course is not just about the specific technical\naspects of Programming, but also a preparation for studying Computer Science\nand the thought processes and skills necessary for a career in the field.Teaching StrategiesLecturesLectures will be used to present the theory and\npractice of the techniques and tools in this course. There will be\nextensive use of  practical demonstrations during\nlectures. Lecture notes will be available on the course web pages\nbefore each lecture.TutorialsFrom week 1 you will also be expected to attend a one-hour tutorial\nsession to clarify ideas from lectures and work through exercises\nbased on the lecture material. You should make sure that you use them\neffectively by examining in advance the material to be covered in each\nweek's tutorial, by asking questions, by offering suggestions and by generally\nparticipating. The tutorial questions will be posted on the Web in the\nweek before each tutorial.  There are no marks for tutorial attendance.Laboratory ClassesFollowing the tutorial class each week, there will be a two-hour laboratory class,\nduring which you will work on a variety of small practical problems\ninvolving the tools introduced in lectures.\nBecause this course is practical in nature, laboratory classes are a very\nimportant component. If you do not put a great deal of effort into the lab classes\nyou risk failing the final exam.Each week, there will be several exercises to work on. These exercises will be\nreleased in the week preceding the lab class.Most lab exercises will be done in\npairs, and you and you partner should discuss the exercises before the lab to\nmaximise the usefulness of the class.Tutors  will facilitate you forming pairs in your week 1 lab (which is not\nassessed). The pairs will change twice during session.Starting week 3, pairs will also be asked to do code reviews in the tutorials,\nto explain how they tackled a particular problem and describe interesting\nfeatures of their solution.OverviewLab exercises will be automarked (marked automatically by a computer),\nso that tutors can spend lab time assisting students rather than marking\nlabs.SubmissionFor each of the lab exercises,bothmembers of each lab pair need\nto submit the exerciseseparatelyusinggive.You cannot obtain marks by e-mailing lab work to tutors or lecturers.If you cannot complete the exercise by the end of the lab\nyou may complete it in your own time and submit it using thegivecommandbefore 5pm Monday(Monday 17:00).Challenge ExercisesChallenge exercises may be specified for some labs.Some challenge lab exercises typically will specify that they are individual\nexercises (not to be done with your partner).Challenge exercises may be silly, confusing or unreasonably difficult.Do not worry if you can not complete challenge exercises.Lab MarkingLab exercises will be automarked, using test cases that you haven't seen:\ndifferent to the test casesautotestruns for\nyou.\n\n(Hint: do your own testing as well as runningautotest)There will be partial marks for attempts which fail some of these\nautomated tests.AutomarkingAutomarking will be run several days after the submission deadline\nfor the lab. When it  is complete you should be able toview it hereor by running this command on a CSE machine:1511 classrun -collect exercise_nameLab MarksWhen all components of a lab  are automarked you should be able to view the\nthe marksvia give's web interfaceor by running this command on a CSE machine:1511 classrun -sturecThere will be more lab marks available than necessary\nto obtain full marks for the 13% lab component.\nIn other words: total lab marks will be capped.The lab exercises for week are worth in total 2 marks.Except there are no marks for the week 1 lab.Usually each lab exercise will be worth the same - for example if\nthere are 5 lab exercises each will be worth 0.4 marks.Except challenge exercises (see below) will never total more than 20% of each week's lab mark.The best 8 of your 9 lab marks for weeks 2-10, will be summed to give you a mark out of 13.If their sum exceeds 13 - your total mark will be capped at 13.Hence:You can miss 1 lab without affecting your mark.You can obtain full marks for the lab component without doing any challenge exercises.Help SessionsThere will be consultation sessions starting in week 2 where tutors will be \navailable for one on one help with\nspecific problems and assignment clarification. These sessions are optional and \nwill run at different times during the week, with more sessions available \naround assignment deadlines and in later weeks of the term. Check the course\ntimetable for what Help Sessions have been scheduled.Live StreamingLive Streaming sessions that you can join from your own computer will be run at\nspecific times in the term when help is needed.\nThese will involve some live problem solving and coding that will \nanswer frequently asked questions as well as show some more examples of specific\ncoding based on student requests. Live participation will allow students to ask\nquestions during the sessions.\nThese sessions will be recorded and available for viewing after they're streamed.\nCheck the course website for a stream schedule.Weekly Coding TestsThere will be 8 weekly coding tests from weeks 3-10 designed to give you timely\n& realistic feedback of your understanding of the course material.These will be conducted in your own time under self-enforced exam-like conditions.Each test will specify the conditions but typically these will includeNo assistance from any person.A time limit (1 hour).No access to materials (written or online) except specified language\n    documentation or man pages.Each coding test will be automatically marked. There will be partial marks for\nattempts which do not pass automatic tests.\n\nHere is an indicative guide:Passes all automatic tests.1/1Fails several automatic tests.0.75/1otherwise0.5/1Your mark for the coding test component will be the sum of your best 7 of 8 test marks.Any deliberate violation of the test conditions will result in a mark of zero\nfor the entire programming test component.The weekly programming test must be completed by Thursday 5pm the week after it is released.AssignmentsThere are two assessable programming assignments. Assignments give you the\nchance to practice what you have learned on relatively large problems (compared\nto the small exercises in the labs).\n\nAssignments are a very important part of this course, therefore it is essential\nthat you attempt them yourself.Assignment 1 (Submission, Week 6)   13%Assignment 2 (Submission, Week 10)  13%The assignment weighting and deadlines may change a little when the assignment\ndesigns are complete.Late assignments submissions will be penalized.  The exact penalty will be\nspecified in the assignment specification - typically it is 2% reduction in maximum\nmark for every hour late.Final ExamThere will be a three-hour primarily practical exam, to be held in the CSE labs\nduring the exam period.  This will be centrally timetabled and appear\nin your UNSW exam timetable.It will contain implementation tasks which will require you to write C programs.\nIt will also contain sections which require you to read code or answer questions.During this exam you will be able to execute, debug and test your answers.\nThe implementation tasks will be similar to those encountered in lab exercisesAssessmentComponentWeightLab Work13%Weekly Tests7%Assignments26%Final Exam  (exam period)54%Supplementary AssessmentStudents will be offered a supplementary exam if they miss the original\nexam due to (documented) illness or misadventure. Applications for Special\nConsideration are handled by UNSW Student Support and Services, not by\nsubject staff.The supplementary exam is scheduled for the week of the 13-17th January 2020.\nIt is your responsibility to be in Sydney and available for the supplementary exam.\nNo alternative will be offered.Student ConductThe Student Code of Conduct (Information,Policy)\nsets out what the University expects from students as members of the UNSW\ncommunity.\n\nAs well as the learning, teaching and research environment, the\nUniversity aims to provide an environment that enables students to achieve\ntheir full potential and to provide an experience consistent with the\nUniversity's values and guiding principles.\n\nA condition of enrolment is that\nstudents inform themselves of the University's rules and policies affecting\nthem, and conduct themselves accordingly.In particular, students have the responsibility to observe standards of equity\nand respect in dealing with every member of the University community.\n\nThis applies to all activities on UNSW premises and all external activities\nrelated to study and research. This includes behaviour in person as well as\nbehaviour on social media, for example Facebook groups set up for the purpose of\ndiscussing UNSW courses or course work.\n\nBehaviour that is considered in breach of the Student Code Policy as\ndiscriminatory, sexually inappropriate, bullying, harassing, invading another's\nprivacy or causing any person to fear for their personal safety is serious\nmisconduct and can lead to severe penalties, including suspension or exclusion\nfrom UNSW.If you have any concerns, you may raise them with your lecturer, or approach\ntheSchool Ethics Officer,Grievance Officer,\nor one of the student representatives.All work submitted for assessment must be your own work.Lab exercises must be completed by you and your partner.Assignments must be completedindividually.Submission of other people's work as your own (plagiarism) has a major impact on\nlearning so we use plagiarism detection software to search for\nmultiply-submitted work.Please note:Submitting part or all of other students' work, with or without acknowledgement,\nis not acceptable.Submitting work written even partly by another person is also not acceptable.Building on ideas and code snippets obtained from public sources, e.g. Stack\nOverflow, is acceptable (unless the assignment/lab forbids this) provided full\nacknowledgement of their resources is made.Discussing approaches to exercises and assignments with other students is quite\nappropriate, but any discussions should remain at the design level, and must not\ninclude program text. Comparison tools will detect any common code across\nthe student body and previous iterations of the course.The safest approach is to work diligently on your own, seeking help from the\nforum or course staff.Submission of work derived from another person, or jointly written with someone\nelse will result in loss of marks and your name being entered on UNSW's\nplagiarism register.\nThis loss of marks often results in the student failing the course.Providing your work to another person will also result in the loss of marks\nand your name being entered on UNSW's plagiarism register.\nDo not provide your work to any other person, even people who are not UNSW students.\nYou will be held responsible for the actions of anyone you provide your work to.Severe or second offences may result in automatic failure or exclusion from UNSW.Make sure you read:the Learning Centre'sexplanation of plagiarism.UNSW's policy regarding academic honesty and plagiarismOther mattersOccupational Health and Safety policiesInformation for students with disabilitiesContact the lecturer ASAP if you have any disabilities that may affect this course.Course Evaluation and DevelopmentEvery semester, COMP1511 student feedback is requested in a survey at the\nend of this course using UNSW's myExperience online survey system.This feedback is used to improve the course materials and their delivery.In the most recent session feedback was very favourable probably as a result of\nchanges based on the previous session's feedback.\n\nFeedback from surveys for COMP1511's previous offerings has resulted in\nchanges to COMP1511 delivery, including introduction of weekly programming tests.\n\nSome lab exercises and lecture topics will be updated to better reflect current\npractice.Students are also encouraged to provide informal feedback during the session,\nand to let the lecturer in charge know of any problems, as soon as they arise.\n\nSuggestions will be listened to very openly, positively, constructively, and\nthankfully, and every reasonable effort will be made to address them.Resources for StudentsNo textbook is required for COMP1511.The optional textbook for the course is:Programming, Problem Solving, and Abstraction with Cby Alistair Moffat,ISBN978\u00a01\u00a074103\u00a0080\u00a03,\nwhich can be purchased from the UNSW Bookshop.COMP1511 19T3: Programming Fundamentalsis brought to you bytheSchool of Computer Science and Engineeringat theUniversity of New South Wales, Sydney.For all enquiries, please email the class account atcs1511@cse.unsw.edu.auCRICOS Provider 00098G"
  },
  {
    "offering_time": "T2",
    "code": "COMP1521",
    "name": "Computer Systems Fundamentals",
    "outline": "This course introduces students to\nhow computer systems are structured\nin terms of basic electronic components,\nhow they are used to implement procedural programs,\nand how they are structured\nas a collection of software layers.\nIt introduces students to\nlow-level software layers such as\noperating systems and network infrastructure,\nand introduces concurrency concepts.\nThe goal is to give students\na solid understanding of what happens\nwhen high-level programs are executed,\nas a basis for further study\nin important areas of computing\nsuch as computer architecture,\noperating systems, and networks.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP1521/19T2/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP2041",
    "name": "Software Construction",
    "url": "https://cgi.cse.unsw.edu.au/~cs2041/19T2/resources/outline.html",
    "outline": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP2121",
    "name": "Microprocessors & Interfacing",
    "outline": "The aims of this course are to introduce students to the basic concepts and major components of microprocessors and micro controllers and to provide students with knowledge and skills for solving problems with microprocessors and micro-controllers.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP2121/19T2/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP2511",
    "name": "O-O Design & Programming",
    "outline": "COMP 2511 covers the theory and practice of object-oriented design and programming with an emphasis on teaching students how to apply software design principles and design patterns to the building of flexible, reusable and maintainable systems. The course also introduces user-interface design and programming and includes the implementation of a large project done in pairs using agile software practices and enables students to have hands-on experience in applying the principles taught, implementing and incorporating the use of good design principles and design patterns in software programs",
    "url": "https://webcms3.cse.unsw.edu.au/COMP2511/19T3/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP2521",
    "name": "Data Structures and Algorithms",
    "url": "https://cgi.cse.unsw.edu.au/~cs2521/19T3/admin/outline/index.php",
    "outline": "The goal of this course is\nto deepen your understanding of data structures and algorithms\nand how these can be employed effectively\nin the design of software systems.\nIt is an important course in covering\na range of core data structures and algorithms\nthat will be used in context in later courses.\nYou explore these ideas in lectres, tutorials, lab classes, and assignments.\nAssessment involves labs, tutes, practical lab exams, a practical final exam, and a theory exam.\nAt the end of the course, we want you to be a solid programmer, with knowledge of a range of useful\ndata structures and programming techniques, capable of building significant\nsoftware systems in a team environment, and ready to continue with further specialised studies in computing.Topics:\nAn introduction the structure, analysis and usage\nof a range of fundamental data types and\nthe core algorithms that operate on them, including:\nalgorithm analysis, sorting, searching, trees,\ngraphs, files, algorithmic strategies,\nanalysis and measurement of programs.\nLabs and programming assignments in C,\nusing a range of Unix tools.Executive SummaryA summary of the critical things to know about COMP2521:attempt all of the labs, tutorials, and assignments yourselfalways try to produce a better program than last timein lectures, think critically about what's being said/shownthe textbook is a useful reference source beyond this courseassessment: labs: 8%, assignments: 22%, midterm exam: 10%, final exam: 60%enjoy the course!Now, please read the rest of this document.Course TimetableThe complete course timetable is available at:webcms3:/timetableCourse AimsThe aim of this course is\nto get you tothink like a computer scientist.\nThis certainly sounds like a noble goal...\nbut what does it really mean?\nHow does ascientist,\nlet alone a computer scientist,\nactually think?What many types of scientists try to do\nis understand natural systems and processes:\na geologist, for example,\ntries to understand the structure of the earth;\na biologist tries to understand living organisms;\na chemist tries to understand materials and reactions,\nand so on.Computer scientists don't,\nas the name might suggest,\nsimply try to understand\nthe structure and behaviour of computers,\nbut are more concerned with\nunderstanding software systems\n(and the interaction between\nthe software and the hardware on which it runs).\nAlso, unlike other scientists,\ncomputer scientists frequently build\nthe objects that they study.During this course, we'll be looking at\nways of creating, analysing and understanding software.\nUltimately, you should be able to answer the question,is this piece of software any good?and be able to provide sound reasons to justify your answer.This course follows on from introductory C programming courses:\nCOMP1511, COMP1917, or COMP1921.\nWe cover additional aspects of the C programming language\nthat were not covered in those courses,\nand also look at some programming tools\nwhich were not covered (in detail) earlier.\nHowever, this course is not simply\na second C programming course:\nthe focus is on the ideas and abstractions\nbehind the data structures and algorithms that are used.COMP2521 is a critical course\nin the study of computing at UNSW,\nsince it deals with many concepts that are\ncentral to future studies in the area.\nWhether you are studying Computer Science,\nSoftware Engineering, Bioinformatics,\nComputer Engineering,\nor even a discipline outside the realm of computing,\nunderstanding a range of algorithms and data structures\nand how to use them\nwill make you a much more effective\ncomputing problem solver in the future.Student Learning Outcomes"
  },
  {
    "offering_time": "T2",
    "code": "COMP3141",
    "name": "Software Sys Des&Implementat'n",
    "url": "http://www.cse.unsw.edu.au/~cs3141/19t2/outline.html",
    "outline": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP3151",
    "name": "Foundations of Concurrency",
    "outline": "In this course you will learn about the foundational concepts of concurrent programs (including multi-threaded, parallel, and distributed programs) and the crucial abstractions used to implement or understand behaviour of concurrent programs. Classical problems arising in concurrent programs will be examined and solutions to these problems will be analysed. Practical work will include proofs of program properties, plus some programming in a concurrent programming language (Java or a suitable alternative) with simultaneous model checking.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3151/19T2/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP3331",
    "name": "Computer Networks&Applications",
    "outline": "This course is an introductory course on computer networks, aimed at students with a background in computer science / electrical engineering. We will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of(1) medium access control, congestion control, flow control, and reliable transmission,(2) addressing and naming,(3) routing and switching,(4) widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.(5) security threats and common defensive techniques, and(6) special purpose networks such as content delivery networks, peer-to-peer networks and wireless networks.This is a combined undergraduate and postgraduate course.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3331/19T3/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP3411",
    "name": "Artificial Intelligence",
    "outline": "Give a brief summary for why this course is relevant, where it fits in the \n  degree(s), and its aims ...",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3411/19T1/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP3421",
    "name": "Computer Graphics",
    "outline": "This course teaches the fundamental algorithms underlying computer graphics in both 2D and 3D. It introduces students to an industry standard graphics API (OpenGL) and gives them experience developing graphical applications.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3421/19T2/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP3821",
    "name": "Ext Algorithms&Prog Techniques",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP3900",
    "name": "Computer Science Project",
    "outline": "A capstone software project. Students work in teams to define, implement and evaluate a real-world software system. Most of the work in this course is team-based project work, although there are some introductory lectures on software project management and teamwork strategies. Project teams meet weekly with project mentors to report on the progress of the project. Assessment is based on a project proposal, a final project demonstration and report, and on the quality of the software system itself. Students are also required to reflect on their work and to provide peer assessment of their team-mates' contributions to the project.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9900/19T1/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP3901",
    "name": "Special Project A",
    "url": "http://www.cse.unsw.edu.au/~morri/specialProject.html",
    "outline": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP3902",
    "name": "Special Project B",
    "url": "http://www.cse.unsw.edu.au/~morri/specialProject.html",
    "outline": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP4336",
    "name": "Mobile Data Networking",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP4511",
    "name": "User Interface Design & Constr",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP4930",
    "name": "Thesis Part A",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP4931",
    "name": "Thesis Part B",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP4941",
    "name": "Thesis Part B",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP4951",
    "name": "Research Thesis A",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP4952",
    "name": "Research Thesis B",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP4953",
    "name": "Research Thesis C",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP4961",
    "name": "Computer Science Thesis A",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP4962",
    "name": "Computer Science Thesis B",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP4963",
    "name": "Computer Science Thesis C",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP6441",
    "name": "Security Engineering",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP6447",
    "name": "Security Assessment",
    "url": "https://www.cse.unsw.edu.au/~cs6447/19T2/COMP%5b69%5d447_Course_Outline(1).pdf",
    "outline": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP6721",
    "name": "(In-)Formal Methods",
    "url": "http://www.cse.unsw.edu.au/~cs6721/",
    "outline": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP6752",
    "name": "Modelling Concurrent Systems",
    "url": "http://www.cse.unsw.edu.au/~rvg/6752/",
    "outline": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP6771",
    "name": "Advanced C++ Programming",
    "outline": "COMP6771 is an advanced programming course teaching practical aspects of intermediate/advanced C++ programming. The course focuses on teaching the fundamentals of C++, followed by exploring powerful abstractions that C++ enables. This course focuses on using abstractions as well as building abstractions.COMP6771 is focused on modern, practical programming methods and tools. This course is designed for latter year CSE students with a reasonable degree of programming competencies.The course is heavily supported byChristopher Di Bella, a UNSW CSE graduate who is a well regarded expert on C++. His knowledge and expertise assists in forming and updating the course.Our aim for students who complete this course satisfactorily is that they are highly competent in understanding C++ and it's core features, being able to build complex programs, data structures, and algorithms with C++, and being ready to immediately move into the workforce in areas that rely heavily on C++.COMP6771 can be a challenging course for students due to the volume of work to complete in a 10 week period.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP6771/19T2/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP6841",
    "name": "Extended Security Engineering",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP9021",
    "name": "Principles of Programming",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9021/19T3/outline",
    "private": true
  },
  {
    "offering_time": "T2",
    "code": "COMP9024",
    "name": "Data Structures & Algorithms",
    "outline": "Data structures are about how data is stored inside a computer for effective and efficient use. An algorithm is a step-by-step process for solving a problem within a finite amount of space and time. Data structures and algorithms are not only important in software design, but also in hardware design. Being proficient in data structures and algorithms are essential for good software developers, hardware developers, and system architects.The actual content is taken from a list of subjects that constitute the basis of the tool box of every serious practitioner of computing: data types and data structures, abstract data types, dynamic data structures, analysis of algorithms and a variety of fundamental algorithms for graphs, trees and text processing.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9024/19T3/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP9044",
    "name": "Software Construction",
    "url": "https://cgi.cse.unsw.edu.au/~cs2041/19T2/resources/outline.html",
    "outline": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP9154",
    "name": "Foundations of Concurrency",
    "outline": "In this course you will learn about the foundational concepts of concurrent programs (including multi-threaded, parallel, and distributed programs) and the crucial abstractions used to implement or understand behaviour of concurrent programs. Classical problems arising in concurrent programs will be examined and solutions to these problems will be analysed. Practical work will include proofs of program properties, plus some programming in a concurrent programming language (Java or a suitable alternative) with simultaneous model checking.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3151/19T2/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP9242",
    "name": "Advanced Operating Systems",
    "url": "https://www.cse.unsw.edu.au/~cs9242/19/outline.shtml",
    "outline": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP9301",
    "name": "Cyber Security Project",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP9302",
    "name": "Cyber Security Project B",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP9311",
    "name": "Database Systems",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9311/19T3/outline",
    "private": true
  },
  {
    "offering_time": "T2",
    "code": "COMP9313",
    "name": "Big Data Management",
    "url": "https://webcms3.cse.unsw.edu.au/static/uploads/course/COMP9313/19T2/45d97e095ed0ec82f8a4e1dbf149cf7917e34668ef062e87b12e3a0a94258f9d/Course-Outline.pdf",
    "outline": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP9315",
    "name": "Database Systems Implementat'n",
    "outline": "This course aims to introduce students to the detailed internal structure of database management systems (DBMSs) such as Oracle or SQL Server. DBMSs contain a variety of interesting data structures and algorithms that are also potentially useful outside the DBMS context; knowing about them is a useful way of extending your general programming background.  While the focus is on relational DBMSs, given that they have the best-developed technological foundation, we will also consider more recent developments in the management of large data repositories.Relational DBMSs need to deal with a variety of issues: storage structures and management, implementation of relational operations, query optimisation, transactions, concurrency, recovery, security. The course will address most of these, along with a brief look at emerging database systems trends. The level of detail on individual topics will vary; some will be covered in significant detail, others will be covered relatively briefly.An important aspect of this course is to give you a chance to undertake an in-depth exploration of the internals of arealDBMS: PostgreSQL. Lectures will discuss the general principles of how DBMSs are implemented, and will also illustrate them with examples from PostgreSQL where possible.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9315/19T2/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP9319",
    "name": "Web Data Compression & Search",
    "outline": "As the amount of Web data increases, it is becoming vital to not only be able to search and retrieve this information quickly, but also to store it in a compact manner. This is especially important for mobile devices which are becoming increasingly popular. Without loss of generality, within this course, we assume Web data (excluding media content) will be in XML and its like (e.g., XHTML).This course aims to introduce the concepts, theories, and algorithmic issues important to Web data compression and search. The course will also introduce the most recent development in various areas of Web data optimization topics, common practice, and its applications. The course is composed of the following parts:Adaptive coding, information theoryText compression (zip, gzip, bzip, etc)Burrows-Wheeler Transform and backward searchXML compressionIndexingPattern matching and regular expression searchDistributed queryingFast index constructionImplementationIf time allows, we may cover optional topics such as: streaming algorithms, text analytics, Web data optimization for mobile devices.The lecture materials will be complemented by two programming assignments and numerous tutorial exercises.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9319/19T2/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP9322",
    "name": "Software Service Design & Eng",
    "url": "https://webcms3.cse.unsw.edu.au/static/uploads/course/COMP9322/19T2/12de7bb6a37496b728201e17e66eefff411844532d2904167181a1e4a7c80179/Comp9322__Software_Service_Design_and_Engineering-2.pdf",
    "outline": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP9331",
    "name": "Computer Networks&Applications",
    "outline": "This course is an introductory course on computer networks, aimed at students with a background in computer science / electrical engineering. We will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of(1) medium access control, congestion control, flow control, and reliable transmission,(2) addressing and naming,(3) routing and switching,(4) widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.(5) security threats and common defensive techniques, and(6) special purpose networks such as content delivery networks, peer-to-peer networks and wireless networks.This is a combined undergraduate and postgraduate course.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3331/19T2/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP9332",
    "name": "Network Routing and Switching",
    "url": "http://www.cse.unsw.edu.au/~cs9332/outline18s1.html",
    "outline": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP9336",
    "name": "Mobile Data Networking",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP9414",
    "name": "Artificial Intelligence",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9414/19T1/outline",
    "private": true
  },
  {
    "offering_time": "T2",
    "code": "COMP9415",
    "name": "Computer Graphics",
    "outline": "This course teaches the fundamental algorithms underlying computer graphics in both 2D and 3D. It introduces students to an industry standard graphics API (OpenGL) and gives them experience developing graphical applications.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3421/19T2/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP9417",
    "name": "Machine Learning & Data Mining",
    "outline": "This course explores machine learning as the algorithmic approach to learning from data. The course also covers key aspects of data mining, which is understood as the application of machine learning tools to obtain insight from data. Algorithms are placed in the context of their theoretical foundations in order to understand their derivation and correct application. Topics include: linear models for regression and classification, local methods (nearest neighbour), neural networks, tree learning, kernel machines, unsupervised learning, ensemble learning, computational and statistical learning theory, and Bayesian learning. To expand and extend the development of theory and algorithms presented in lectures, practical applications will be given in tutorials and programming tasks during the project.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9417/19T2/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP9517",
    "name": "Computer Vision",
    "outline": "The course will cover topics from: Introduction, image processing, feature detection, pattern recognition, deep learning  , segmentation, motion and image tracking, applications.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9517/19T3/outline"
  },
  {
    "offering_time": "T2",
    "code": "COMP9596",
    "name": "Research Project",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP9801",
    "name": "Ext Design&Analysis of Algo",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP9900",
    "name": "Info Tech Project",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9900/19T3/outline",
    "private": true
  },
  {
    "offering_time": "T2",
    "code": "COMP9901",
    "name": "P/T Res. Thesis Comp Sci & Eng",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP9902",
    "name": "Res. Thesis Comp Sci & Eng F/T",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "COMP9945",
    "name": "Research Project",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP1400",
    "name": "Programming for Designers",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/static/uploads/course/COMP1400/18s2/e21a9db0fb5e62a0423b7df090da765e2da7cfa22895c180f31aad62d185144a/Comp1400-outline-2018.html"
  },
  {
    "offering_time": "T3",
    "code": "COMP1511",
    "name": "Programming Fundamentals",
    "url": "https://www.cse.unsw.edu.au/~cs1511/19T3/resources/outline.html",
    "outline": "This course introduces students to the basics of programming.\nTopics covered include:fundamental programming conceptsthe C programming language and use of a C compilerprogramming styleprogram design and organisation conceptsprogram testing and debuggingCourse AimsThe course aims for students to become proficient in programming using a high\nlevel language, C.\n\nBy the end of the course, students should be able to\nconstruct C programs to solve problems.Course Learning Outcomesunderstand the core syntax and semantics of the C programming language including\ntypes, I/O, arrays, functions, pointers, structs and dynamic memory allocationgiven a problem, solve it by proficiently constructing (designing, testing,\ndebugging) a secure, reliable and correct C programunderstand and employ fundamental data structures including arrays and\nlinked listsuse Linux and Unix-like operating systems to develop and test softwareCOMP1511 versus COMP1911COMP1511 is designed for computer science majors, and for any student\nwith a keen interest in computing, regardless of their degree program.COMP1911 is for students who are not computer science majors.\nCOMP1911 covers a subset of the material in COMP1511 and moves at a more\ngentle pace.If you are a computer science major, you must take COMP1511If you are not a computer science major, but have an interest in computer\nscience and think you may take further COMP courses, you also should enrol in\nCOMP1511And if you have previous programming experience -and enjoyed it- choose COMP1511Course ScheduleWeek 1Course Introduction, Compiling and Running C Programs,\n    Variables, Simple input and output, If statementsWeek 2Continuing If statements,\n    Boolean Expressions,\n\tLoops,\n\tProblem SolvingWeek 3Loops,\n\tNested Loops,\n\tMemory and Arrays,\n\tCode ReviewsWeek 4More Arrays,\n    Characters and Strings,\n    FunctionsWeek 5Pointers and Memory,\n    DebuggingWeek 6Structs and Pointers,\n    ProfessionalismAssignment 1dueWeek 7Multi-file projects,\n    Memory Allocation,\n    Linked ListsWeek 8Linked ListsWeek 9Abstract data types & Interfaces,\n\tStacks and Queues,Week 10Revision,\n    Exam preparationAssignment 2dueExam PeriodFinal ExamTopics including development approaches, programming style, testing, debugging\nstrategies and ethics will be discussed though the course as they arise.Teaching RationaleThis course has a heavy practical orientation.  Lectures will revolve\naround live demonstrations of programming and use of tools.\nLabs and assignments form a key part.On top of this, the course is not just about the specific technical\naspects of Programming, but also a preparation for studying Computer Science\nand the thought processes and skills necessary for a career in the field.Teaching StrategiesLecturesLectures will be used to present the theory and\npractice of the techniques and tools in this course. There will be\nextensive use of  practical demonstrations during\nlectures. Lecture notes will be available on the course web pages\nbefore each lecture.TutorialsFrom week 1 you will also be expected to attend a one-hour tutorial\nsession to clarify ideas from lectures and work through exercises\nbased on the lecture material. You should make sure that you use them\neffectively by examining in advance the material to be covered in each\nweek's tutorial, by asking questions, by offering suggestions and by generally\nparticipating. The tutorial questions will be posted on the Web in the\nweek before each tutorial.  There are no marks for tutorial attendance.Laboratory ClassesFollowing the tutorial class each week, there will be a two-hour laboratory class,\nduring which you will work on a variety of small practical problems\ninvolving the tools introduced in lectures.\nBecause this course is practical in nature, laboratory classes are a very\nimportant component. If you do not put a great deal of effort into the lab classes\nyou risk failing the final exam.Each week, there will be several exercises to work on. These exercises will be\nreleased in the week preceding the lab class.Most lab exercises will be done in\npairs, and you and you partner should discuss the exercises before the lab to\nmaximise the usefulness of the class.Tutors  will facilitate you forming pairs in your week 1 lab (which is not\nassessed). The pairs will change twice during session.Starting week 3, pairs will also be asked to do code reviews in the tutorials,\nto explain how they tackled a particular problem and describe interesting\nfeatures of their solution.OverviewLab exercises will be automarked (marked automatically by a computer),\nso that tutors can spend lab time assisting students rather than marking\nlabs.SubmissionFor each of the lab exercises,bothmembers of each lab pair need\nto submit the exerciseseparatelyusinggive.You cannot obtain marks by e-mailing lab work to tutors or lecturers.If you cannot complete the exercise by the end of the lab\nyou may complete it in your own time and submit it using thegivecommandbefore 5pm Monday(Monday 17:00).Challenge ExercisesChallenge exercises may be specified for some labs.Some challenge lab exercises typically will specify that they are individual\nexercises (not to be done with your partner).Challenge exercises may be silly, confusing or unreasonably difficult.Do not worry if you can not complete challenge exercises.Lab MarkingLab exercises will be automarked, using test cases that you haven't seen:\ndifferent to the test casesautotestruns for\nyou.\n\n(Hint: do your own testing as well as runningautotest)There will be partial marks for attempts which fail some of these\nautomated tests.AutomarkingAutomarking will be run several days after the submission deadline\nfor the lab. When it  is complete you should be able toview it hereor by running this command on a CSE machine:1511 classrun -collect exercise_nameLab MarksWhen all components of a lab  are automarked you should be able to view the\nthe marksvia give's web interfaceor by running this command on a CSE machine:1511 classrun -sturecThere will be more lab marks available than necessary\nto obtain full marks for the 13% lab component.\nIn other words: total lab marks will be capped.The lab exercises for week are worth in total 2 marks.Except there are no marks for the week 1 lab.Usually each lab exercise will be worth the same - for example if\nthere are 5 lab exercises each will be worth 0.4 marks.Except challenge exercises (see below) will never total more than 20% of each week's lab mark.The best 8 of your 9 lab marks for weeks 2-10, will be summed to give you a mark out of 13.If their sum exceeds 13 - your total mark will be capped at 13.Hence:You can miss 1 lab without affecting your mark.You can obtain full marks for the lab component without doing any challenge exercises.Help SessionsThere will be consultation sessions starting in week 2 where tutors will be \navailable for one on one help with\nspecific problems and assignment clarification. These sessions are optional and \nwill run at different times during the week, with more sessions available \naround assignment deadlines and in later weeks of the term. Check the course\ntimetable for what Help Sessions have been scheduled.Live StreamingLive Streaming sessions that you can join from your own computer will be run at\nspecific times in the term when help is needed.\nThese will involve some live problem solving and coding that will \nanswer frequently asked questions as well as show some more examples of specific\ncoding based on student requests. Live participation will allow students to ask\nquestions during the sessions.\nThese sessions will be recorded and available for viewing after they're streamed.\nCheck the course website for a stream schedule.Weekly Coding TestsThere will be 8 weekly coding tests from weeks 3-10 designed to give you timely\n& realistic feedback of your understanding of the course material.These will be conducted in your own time under self-enforced exam-like conditions.Each test will specify the conditions but typically these will includeNo assistance from any person.A time limit (1 hour).No access to materials (written or online) except specified language\n    documentation or man pages.Each coding test will be automatically marked. There will be partial marks for\nattempts which do not pass automatic tests.\n\nHere is an indicative guide:Passes all automatic tests.1/1Fails several automatic tests.0.75/1otherwise0.5/1Your mark for the coding test component will be the sum of your best 7 of 8 test marks.Any deliberate violation of the test conditions will result in a mark of zero\nfor the entire programming test component.The weekly programming test must be completed by Thursday 5pm the week after it is released.AssignmentsThere are two assessable programming assignments. Assignments give you the\nchance to practice what you have learned on relatively large problems (compared\nto the small exercises in the labs).\n\nAssignments are a very important part of this course, therefore it is essential\nthat you attempt them yourself.Assignment 1 (Submission, Week 6)   13%Assignment 2 (Submission, Week 10)  13%The assignment weighting and deadlines may change a little when the assignment\ndesigns are complete.Late assignments submissions will be penalized.  The exact penalty will be\nspecified in the assignment specification - typically it is 2% reduction in maximum\nmark for every hour late.Final ExamThere will be a three-hour primarily practical exam, to be held in the CSE labs\nduring the exam period.  This will be centrally timetabled and appear\nin your UNSW exam timetable.It will contain implementation tasks which will require you to write C programs.\nIt will also contain sections which require you to read code or answer questions.During this exam you will be able to execute, debug and test your answers.\nThe implementation tasks will be similar to those encountered in lab exercisesAssessmentComponentWeightLab Work13%Weekly Tests7%Assignments26%Final Exam  (exam period)54%Supplementary AssessmentStudents will be offered a supplementary exam if they miss the original\nexam due to (documented) illness or misadventure. Applications for Special\nConsideration are handled by UNSW Student Support and Services, not by\nsubject staff.The supplementary exam is scheduled for the week of the 13-17th January 2020.\nIt is your responsibility to be in Sydney and available for the supplementary exam.\nNo alternative will be offered.Student ConductThe Student Code of Conduct (Information,Policy)\nsets out what the University expects from students as members of the UNSW\ncommunity.\n\nAs well as the learning, teaching and research environment, the\nUniversity aims to provide an environment that enables students to achieve\ntheir full potential and to provide an experience consistent with the\nUniversity's values and guiding principles.\n\nA condition of enrolment is that\nstudents inform themselves of the University's rules and policies affecting\nthem, and conduct themselves accordingly.In particular, students have the responsibility to observe standards of equity\nand respect in dealing with every member of the University community.\n\nThis applies to all activities on UNSW premises and all external activities\nrelated to study and research. This includes behaviour in person as well as\nbehaviour on social media, for example Facebook groups set up for the purpose of\ndiscussing UNSW courses or course work.\n\nBehaviour that is considered in breach of the Student Code Policy as\ndiscriminatory, sexually inappropriate, bullying, harassing, invading another's\nprivacy or causing any person to fear for their personal safety is serious\nmisconduct and can lead to severe penalties, including suspension or exclusion\nfrom UNSW.If you have any concerns, you may raise them with your lecturer, or approach\ntheSchool Ethics Officer,Grievance Officer,\nor one of the student representatives.All work submitted for assessment must be your own work.Lab exercises must be completed by you and your partner.Assignments must be completedindividually.Submission of other people's work as your own (plagiarism) has a major impact on\nlearning so we use plagiarism detection software to search for\nmultiply-submitted work.Please note:Submitting part or all of other students' work, with or without acknowledgement,\nis not acceptable.Submitting work written even partly by another person is also not acceptable.Building on ideas and code snippets obtained from public sources, e.g. Stack\nOverflow, is acceptable (unless the assignment/lab forbids this) provided full\nacknowledgement of their resources is made.Discussing approaches to exercises and assignments with other students is quite\nappropriate, but any discussions should remain at the design level, and must not\ninclude program text. Comparison tools will detect any common code across\nthe student body and previous iterations of the course.The safest approach is to work diligently on your own, seeking help from the\nforum or course staff.Submission of work derived from another person, or jointly written with someone\nelse will result in loss of marks and your name being entered on UNSW's\nplagiarism register.\nThis loss of marks often results in the student failing the course.Providing your work to another person will also result in the loss of marks\nand your name being entered on UNSW's plagiarism register.\nDo not provide your work to any other person, even people who are not UNSW students.\nYou will be held responsible for the actions of anyone you provide your work to.Severe or second offences may result in automatic failure or exclusion from UNSW.Make sure you read:the Learning Centre'sexplanation of plagiarism.UNSW's policy regarding academic honesty and plagiarismOther mattersOccupational Health and Safety policiesInformation for students with disabilitiesContact the lecturer ASAP if you have any disabilities that may affect this course.Course Evaluation and DevelopmentEvery semester, COMP1511 student feedback is requested in a survey at the\nend of this course using UNSW's myExperience online survey system.This feedback is used to improve the course materials and their delivery.In the most recent session feedback was very favourable probably as a result of\nchanges based on the previous session's feedback.\n\nFeedback from surveys for COMP1511's previous offerings has resulted in\nchanges to COMP1511 delivery, including introduction of weekly programming tests.\n\nSome lab exercises and lecture topics will be updated to better reflect current\npractice.Students are also encouraged to provide informal feedback during the session,\nand to let the lecturer in charge know of any problems, as soon as they arise.\n\nSuggestions will be listened to very openly, positively, constructively, and\nthankfully, and every reasonable effort will be made to address them.Resources for StudentsNo textbook is required for COMP1511.The optional textbook for the course is:Programming, Problem Solving, and Abstraction with Cby Alistair Moffat,ISBN978\u00a01\u00a074103\u00a0080\u00a03,\nwhich can be purchased from the UNSW Bookshop.COMP1511 19T3: Programming Fundamentalsis brought to you bytheSchool of Computer Science and Engineeringat theUniversity of New South Wales, Sydney.For all enquiries, please email the class account atcs1511@cse.unsw.edu.auCRICOS Provider 00098G"
  },
  {
    "offering_time": "T3",
    "code": "COMP1521",
    "name": "Computer Systems Fundamentals",
    "outline": "This course introduces students to\nhow computer systems are structured\nin terms of basic electronic components,\nhow they are used to implement procedural programs,\nand how they are structured\nas a collection of software layers.\nIt introduces students to\nlow-level software layers such as\noperating systems and network infrastructure,\nand introduces concurrency concepts.\nThe goal is to give students\na solid understanding of what happens\nwhen high-level programs are executed,\nas a basis for further study\nin important areas of computing\nsuch as computer architecture,\noperating systems, and networks.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP1521/19T2/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP1531",
    "name": "Software Eng Fundamentals",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP1531/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP2511",
    "name": "O-O Design & Programming",
    "outline": "COMP 2511 covers the theory and practice of object-oriented design and programming with an emphasis on teaching students how to apply software design principles and design patterns to the building of flexible, reusable and maintainable systems. The course also introduces user-interface design and programming and includes the implementation of a large project done in pairs using agile software practices and enables students to have hands-on experience in applying the principles taught, implementing and incorporating the use of good design principles and design patterns in software programs",
    "url": "https://webcms3.cse.unsw.edu.au/COMP2511/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP2521",
    "name": "Data Structures and Algorithms",
    "url": "https://cgi.cse.unsw.edu.au/~cs2521/19T3/admin/outline/index.php",
    "outline": "The goal of this course is\nto deepen your understanding of data structures and algorithms\nand how these can be employed effectively\nin the design of software systems.\nIt is an important course in covering\na range of core data structures and algorithms\nthat will be used in context in later courses.\nYou explore these ideas in lectres, tutorials, lab classes, and assignments.\nAssessment involves labs, tutes, practical lab exams, a practical final exam, and a theory exam.\nAt the end of the course, we want you to be a solid programmer, with knowledge of a range of useful\ndata structures and programming techniques, capable of building significant\nsoftware systems in a team environment, and ready to continue with further specialised studies in computing.Topics:\nAn introduction the structure, analysis and usage\nof a range of fundamental data types and\nthe core algorithms that operate on them, including:\nalgorithm analysis, sorting, searching, trees,\ngraphs, files, algorithmic strategies,\nanalysis and measurement of programs.\nLabs and programming assignments in C,\nusing a range of Unix tools.Executive SummaryA summary of the critical things to know about COMP2521:attempt all of the labs, tutorials, and assignments yourselfalways try to produce a better program than last timein lectures, think critically about what's being said/shownthe textbook is a useful reference source beyond this courseassessment: labs: 8%, assignments: 22%, midterm exam: 10%, final exam: 60%enjoy the course!Now, please read the rest of this document.Course TimetableThe complete course timetable is available at:webcms3:/timetableCourse AimsThe aim of this course is\nto get you tothink like a computer scientist.\nThis certainly sounds like a noble goal...\nbut what does it really mean?\nHow does ascientist,\nlet alone a computer scientist,\nactually think?What many types of scientists try to do\nis understand natural systems and processes:\na geologist, for example,\ntries to understand the structure of the earth;\na biologist tries to understand living organisms;\na chemist tries to understand materials and reactions,\nand so on.Computer scientists don't,\nas the name might suggest,\nsimply try to understand\nthe structure and behaviour of computers,\nbut are more concerned with\nunderstanding software systems\n(and the interaction between\nthe software and the hardware on which it runs).\nAlso, unlike other scientists,\ncomputer scientists frequently build\nthe objects that they study.During this course, we'll be looking at\nways of creating, analysing and understanding software.\nUltimately, you should be able to answer the question,is this piece of software any good?and be able to provide sound reasons to justify your answer.This course follows on from introductory C programming courses:\nCOMP1511, COMP1917, or COMP1921.\nWe cover additional aspects of the C programming language\nthat were not covered in those courses,\nand also look at some programming tools\nwhich were not covered (in detail) earlier.\nHowever, this course is not simply\na second C programming course:\nthe focus is on the ideas and abstractions\nbehind the data structures and algorithms that are used.COMP2521 is a critical course\nin the study of computing at UNSW,\nsince it deals with many concepts that are\ncentral to future studies in the area.\nWhether you are studying Computer Science,\nSoftware Engineering, Bioinformatics,\nComputer Engineering,\nor even a discipline outside the realm of computing,\nunderstanding a range of algorithms and data structures\nand how to use them\nwill make you a much more effective\ncomputing problem solver in the future.Student Learning Outcomes"
  },
  {
    "offering_time": "T3",
    "code": "COMP3161",
    "name": "Concepts of Programming Lang.",
    "url": "http://www.cse.unsw.edu.au/~cs3161/19t3/outline.html",
    "outline": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP3222",
    "name": "Digital Circuits and Systems",
    "outline": "This course teaches students the fundamentals of digital design.The course introduces the components of digital systems, explains how these are described in the VHDL hardware description language and familiarizes the student with the implementation of digital circuits using FPGA prototyping boards.Students are expected to attend lectures, tutorials and laboratories.Students are assessed via the completion of lab exercises, a class test and final theoretical and practical exams.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3222/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP3311",
    "name": "Database Systems",
    "outline": "This course aims to explore in depth the practice of developing database applications and the theory behind relational database management systems (RDBMSs). It will also give an overview of the technologies used in implementing database management systems and the past, present and future of database systems and database research.Large data resources are critical to the functioning of just about every significant modern computer application. Hence, knowledge of how to manage them is clearly important to the IT industry. In the context of further study, understanding how to use databases effectively is essential for courses such asCOMP9321Data Services Engineering andCOMP9322Software Service Design and Engineering. COMP3311 also provides a foundation for further study in advanced database topics, such asCOMP9315Database Systems Implementation andCOMP9318Data Warehousing and Data Mining. Database concepts are also relevant in courses such asCOMP9319Web Data Compression and Search andCOMP6714Information Retrieval and Web Search.By the end of this course, we want you to be capable of building high-quality (correct, efficient, and usable) applications based on relational databases, to have a sound understanding of issues in administering relational database management systems, and have an overview of how they work internally.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3311/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP3331",
    "name": "Computer Networks&Applications",
    "outline": "This course is an introductory course on computer networks, aimed at students with a background in computer science / electrical engineering. We will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of(1) medium access control, congestion control, flow control, and reliable transmission,(2) addressing and naming,(3) routing and switching,(4) widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.(5) security threats and common defensive techniques, and(6) special purpose networks such as content delivery networks, peer-to-peer networks and wireless networks.This is a combined undergraduate and postgraduate course.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3331/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP3431",
    "name": "Robotic Software Architecture",
    "outline": "This course gives both a theoretical and a practical introduction to the control of robotic systems. The course is in two parts:An overview of robot software architectures:This part of the course gives students an introduction to the structure of robot software, including the theory of decision making: How can an agent build up knowledge of its world? Having done that, how can an agent choose its actions? A variety of different decision making and planning architectures are covered; including classical planning, reinforcement learning and cognitive architectures. In labs, students will get hands on experience with some of these planning systems.Practical RoboticsThis part of the course gives students a practical introduction to some specific robot architectures; the main system architecture will be the Robot Operating System,ROS. We will be usingTurtleBot3 WaffleRobots, or other robots as available.At the end of this course, students should have:experience with the details of one robot architecture,an overview of a range of other architectures and decision making systems,an understanding of the practicalities of programming physical robots as opposed to purely software systems,an understanding of a robot as a complete system, as well as its component parts.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3431/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP3511",
    "name": "Human Computer Interaction",
    "url": "https://www.cse.unsw.edu.au/~cs3511/HCICourseOutline2019-V1.pdf",
    "outline": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP3601",
    "name": "Design Project A",
    "outline": "This course aims to teach students how to design real world hardware/software co-design projects. Throughout the course of the semester, students will work in groups to achieve a complicated design using and FPGA and external hardware connected to a PC. At the beginning of the course, students will be assigned to a group and given a design task. Several required parameters for the task, including a budget, will be provided to students. This course builds upon the skills you have learnt in other courses, such as COMP2121, COMP3222, electrical engineering and software design courses to complete a large project through group participation.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3601/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP3900",
    "name": "Computer Science Project",
    "outline": "A capstone software project. Students work in teams to define, implement and evaluate a real-world software system. Most of the work in this course is team-based project work, although there are some introductory lectures on software project management and teamwork strategies. Project teams meet weekly with project mentors to report on the progress of the project. Assessment is based on a project proposal, a final project demonstration and report, and on the quality of the software system itself. Students are also required to reflect on their work and to provide peer assessment of their team-mates' contributions to the project.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9900/19T1/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP3901",
    "name": "Special Project A",
    "url": "http://www.cse.unsw.edu.au/~morri/specialProject.html",
    "outline": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP3902",
    "name": "Special Project B",
    "url": "http://www.cse.unsw.edu.au/~morri/specialProject.html",
    "outline": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP4121",
    "name": "Advanced & Parallel Algorithms",
    "url": "http://www.cse.unsw.edu.au/~cs4121/",
    "outline": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP4128",
    "name": "Programming Challenges",
    "url": "http://www.cse.unsw.edu.au/~cs4128/19t3/outline/",
    "outline": "IntroductionData StructuresGraphsDynamic ProgrammingNetwork FlowStringsMathematicsComputational GeometryThere is a tentative course schedule below."
  },
  {
    "offering_time": "T3",
    "code": "COMP4161",
    "name": "Advanced Verification",
    "url": "https://www.cse.unsw.edu.au/~cs4161/outline.html",
    "outline": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP4418",
    "name": "Knowledge Representation",
    "outline": "Knowledge Representation and Reasoning (KRR) is at the core of Artificial Intelligence. It is concerned with the representation of knowledge in symbolic form and the use of this knowledge for reasoning. This course presents current trends and research issues in Knowledge Representation and Reasoning (KRR). It enables students interested in Artificial Intelligence to deepen their knowledge in this important area and gives them a solid background for doing their own work/research in this area. The topics covered include: Commonsense reasoning, Propositional and First-order Logic, Answer set programming, Planning, Reasoning about action, Constraint programming.This course can be a starting point for further exploration of artificial intelligence. Further courses include COMP3431/COMP9431: Robotic Software Architecture, COMP9417: Machine Learning and Data Mining, COMP9444: Neural Networks and COMP9844: Extended Neural Networks.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP4418/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP4920",
    "name": "Management and Ethics",
    "url": "https://www.cse.unsw.edu.au/~cs4920/",
    "outline": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP4930",
    "name": "Thesis Part A",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP4931",
    "name": "Thesis Part B",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP4941",
    "name": "Thesis Part B",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP4951",
    "name": "Research Thesis A",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP4952",
    "name": "Research Thesis B",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP4953",
    "name": "Research Thesis C",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP4961",
    "name": "Computer Science Thesis A",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP4962",
    "name": "Computer Science Thesis B",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP4963",
    "name": "Computer Science Thesis C",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP6445",
    "name": "Digital Forensics",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP6445/19T3/outline",
    "private": true
  },
  {
    "offering_time": "T3",
    "code": "COMP6451",
    "name": "Cryptocurrency and DLT",
    "url": "http://www.cse.unsw.edu.au/~cs6451/",
    "outline": "The course aims to develop an understanding of the requirements for\nelectronic payment systems and how these requirements are realised\nusing distributed ledger technologies. The technical ideas to be\nunderstood include the key cryptographic constructs, economic\nincentive mechanisms and distributed algorithms underpinning\ncryptocurrencies such as Bitcoin and Ethereum. The concept of smart\ncontract will be introduced, and the course aims to develop a basic\nfacility with programming smart contracts on one cryptocurrency\nplatform. The course also aims to introduce students to the broader\ncontext of the range of alternate designs for distributed ledger\ntechnologies, the range of potential applications for these\ntechnologies, and the socio-economic, ethical and legal dimensions of\ntheir use."
  },
  {
    "offering_time": "T3",
    "code": "COMP6714",
    "name": "Info Retrieval and Web Search",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP6733",
    "name": "Internet of Things",
    "url": "https://www.cse.unsw.edu.au/~cs6733/outline.html",
    "outline": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP6741",
    "name": "Parameterized & Exact Comp.",
    "outline": "The course focuses on algorithms for exactly solving NP-hard computational problems. Since no polynomial time algorithm is known for any of these problems, the running time of the algorithms will have a super-polynomial dependence on the input size or some other parameter of the input.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP6741/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP6845",
    "name": "Extended Digital Forensics",
    "outline": "This is a specialist security course in Digital Forensics. Topics include principles of forensic analysis, forensics and the law, forensics on several types of infrastructure, management of forensic methodologies and various real life case studies of forensic analyses.Students of this course will apply forensic methods in controlled environments and gain an understanding of the technical process of uncovering hidden data and other metadata which may reveal user behaviour. Students will also develop skills in reporting their findings and evaluate the ethical consequences of their findings.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP6445/18s2/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP9020",
    "name": "Foundations of Comp. Science",
    "outline": "The official scope is: mathematical methods for designing correct and \nefficient programs; mathematics for algorithm analysis; logic for \nproving and verification.The actual content is taken from a list of subjects that constitute \nthe basis of the tool box of every serious practitioner of computing: \nset and relation theory; induction, recursion and recurrence relations; \norder of growth of functions; structured counting (combinatorics); \ndiscrete probability; graph theory and trees for algorithmic \napplications; propositional logic and boolean algebras.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9020/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP9021",
    "name": "Principles of Programming",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9021/19T3/outline",
    "private": true
  },
  {
    "offering_time": "T3",
    "code": "COMP9024",
    "name": "Data Structures & Algorithms",
    "outline": "Data structures are about how data is stored inside a computer for effective and efficient use. An algorithm is a step-by-step process for solving a problem within a finite amount of space and time. Data structures and algorithms are not only important in software design, but also in hardware design. Being proficient in data structures and algorithms are essential for good software developers, hardware developers, and system architects.The actual content is taken from a list of subjects that constitute the basis of the tool box of every serious practitioner of computing: data types and data structures, abstract data types, dynamic data structures, analysis of algorithms and a variety of fundamental algorithms for graphs, trees and text processing.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9024/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP9032",
    "name": "Microprocessors & Interfacing",
    "outline": "This course is to introduce students to the basic concepts and structure of the microprocessor and microcontroller, and provide students with knowledge and skills for solving problems with microprocessor/microcontroller.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9032/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP9164",
    "name": "Concepts of Programming Lang.",
    "url": "http://www.cse.unsw.edu.au/~cs3161/19t3/outline.html",
    "outline": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP9222",
    "name": "Digital Circuits and Systems",
    "outline": "This course teaches students the fundamentals of digital design.The course introduces the components of digital systems, explains how these are described in the VHDL hardware description language and familiarizes the student with the implementation of digital circuits using FPGA prototyping boards.Students are expected to attend lectures, tutorials and laboratories.Students are assessed via the completion of lab exercises, a class test and final theoretical and practical exams.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3222/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP9243",
    "name": "Distributed Systems",
    "outline": "A distributed system is a computer system consisting of several independent computers, connected by a network, that can work together to perform a task or provide a service. Typical examples include: the World Wide Web, cloud computing, networked file systems, DNS, and massive multiprocessor supercomputers.In this course we aim to provide students with a deeper understanding of distributed systems. In particular we focus on the principles, techniques, and practices relevant to the design and implementation of such systems. The course takes a systems-oriented view of distributed systems, concentrating on infrastructure software and providing hands-on experience implementing distributed systems.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9243/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP9301",
    "name": "Cyber Security Project",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP9302",
    "name": "Cyber Security Project B",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP9311",
    "name": "Database Systems",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9311/19T3/outline",
    "private": true
  },
  {
    "offering_time": "T3",
    "code": "COMP9313",
    "name": "Big Data Management",
    "url": "https://webcms3.cse.unsw.edu.au/static/uploads/course/COMP9313/19T3/69847171a7f732cc40ee8ed06b034dd3260f6709a0a018994568d46569b6516b/Outline_latest.pdf",
    "outline": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP9321",
    "name": "Data Services Engineering",
    "url": "https://webcms3.cse.unsw.edu.au/static/uploads/course/COMP9321/19T3/c287839ae9aa88d19fd1025e912308e3dcbbe68ee2e468dcce50870614d7ecf6/Outline_2019T3_latest.pdf",
    "outline": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP9323",
    "name": "e-Enterprise Project",
    "url": "https://webcms3.cse.unsw.edu.au/static/uploads/course/COMP9323/19T3/e0c967290aa973cfd9614cdc8f71d1233a640838017d1119780ce7ac2615c5b6/COMP9323-2019-intro_.pdf",
    "outline": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP9331",
    "name": "Computer Networks&Applications",
    "outline": "This course is an introductory course on computer networks, aimed at students with a background in computer science / electrical engineering. We will focus on common paradigms and protocols used in present data communication. Through lectures, in-class activities, labs and assignments, you will learn the theory and application of(1) medium access control, congestion control, flow control, and reliable transmission,(2) addressing and naming,(3) routing and switching,(4) widely used protocols such as Ethernet, IP, TCP, UDP, HTTP, etc.(5) security threats and common defensive techniques, and(6) special purpose networks such as content delivery networks, peer-to-peer networks and wireless networks.This is a combined undergraduate and postgraduate course.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3331/19T2/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP9417",
    "name": "Machine Learning & Data Mining",
    "outline": "This course explores machine learning as the algorithmic approach to learning from data. The course also covers key aspects of data mining, which is understood as the application of machine learning tools to obtain insight from data. Algorithms are placed in the context of their theoretical foundations in order to understand their derivation and correct application. Topics include: linear models for regression and classification, local methods (nearest neighbour), neural networks, tree learning, kernel machines, unsupervised learning, ensemble learning, computational and statistical learning theory, and Bayesian learning. To expand and extend the development of theory and algorithms presented in lectures, practical applications will be given in tutorials and programming tasks during the project.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9417/19T2/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP9418",
    "name": "Advanced Machine Learning",
    "outline": "This course presents an in-depth study of statistical machine learning approaches. It aims to provide the student with a solid understanding of methods for learning and inference in structured probabilistic models, with a healthy balance of theory and practice.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9418/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP9434",
    "name": "Robotic Software Architecture",
    "outline": "This course gives both a theoretical and a practical introduction to the control of robotic systems. The course is in two parts:An overview of robot software architectures:This part of the course gives students an introduction to the structure of robot software, including the theory of decision making: How can an agent build up knowledge of its world? Having done that, how can an agent choose its actions? A variety of different decision making and planning architectures are covered; including classical planning, reinforcement learning and cognitive architectures. In labs, students will get hands on experience with some of these planning systems.Practical RoboticsThis part of the course gives students a practical introduction to some specific robot architectures; the main system architecture will be the Robot Operating System,ROS. We will be usingTurtleBot3 WaffleRobots, or other robots as available.At the end of this course, students should have:experience with the details of one robot architecture,an overview of a range of other architectures and decision making systems,an understanding of the practicalities of programming physical robots as opposed to purely software systems,an understanding of a robot as a complete system, as well as its component parts.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP3431/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP9444",
    "name": "Neural Networks, Deep Learning",
    "outline": "This course aims to introduce students to the main topics and methods in the field of neural networks and deep learning, ranging from traditional neural network models to the latest research and applications of deep learning.Topics chosen from: perceptrons, feedforward neural networks, backpropagation, deep convolutional networks for image processing; geometric analysis of trained neural networks; recurrent networks, language processing, semantic analysis, long short term memory; Hopfield networks, restricted Boltzmann machines and autoencoders, generative adversarial networks; deep reinforcement learning; designing successful applications of neural networks; recent developments in neural networks and deep learning.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9444/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP9511",
    "name": "Human Computer Interaction",
    "url": "https://www.cse.unsw.edu.au/~cs3511/HCICourseOutline2019-V1.pdf",
    "outline": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP9517",
    "name": "Computer Vision",
    "outline": "The course will cover topics from: Introduction, image processing, feature detection, pattern recognition, deep learning  , segmentation, motion and image tracking, applications.",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9517/19T3/outline"
  },
  {
    "offering_time": "T3",
    "code": "COMP9596",
    "name": "Research Project",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP9900",
    "name": "Info Tech Project",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/COMP9900/19T3/outline",
    "private": true
  },
  {
    "offering_time": "T3",
    "code": "COMP9901",
    "name": "P/T Res. Thesis Comp Sci & Eng",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP9902",
    "name": "Res. Thesis Comp Sci & Eng F/T",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "COMP9945",
    "name": "Research Project",
    "url": ""
  },
  {
    "offering_time": "T0",
    "code": "SENG4904",
    "name": "Industrial Training 1",
    "url": ""
  },
  {
    "offering_time": "T0",
    "code": "SENG4911",
    "name": "Thesis Part B",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "SENG2021",
    "name": "Reqts & Design Workshop",
    "url": "https://webcms3.cse.unsw.edu.au/static/uploads/course/SENG2021/19T1/2e7a1e5315476d8081cce66370f7c5f9818ebb46b712664aacd0e780bdf64537/SENG2021_outline2019_v1.pdf",
    "outline": ""
  },
  {
    "offering_time": "T1",
    "code": "SENG3011",
    "name": "Software Eng Workshop 3",
    "outline": "The purpose of the 3rd year software engineering workshop is to give students experience with a group-based large-scale software development project involving a realistic application in a real-life domain (data analytics).In this session, teams will be developing a complex software application and the focus is to learn about a new application domain, study the requirements, manage the project, liaise with the stakeholder and deliver high quality working solutions. Another aspect of the workshop is to reinforce skills in software design, testing, reporting and the use of support tools around these activities.",
    "url": "https://webcms3.cse.unsw.edu.au/SENG3011/19T1/outline"
  },
  {
    "offering_time": "T1",
    "code": "SENG4906",
    "name": "Industrial Training 3",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "SENG4907",
    "name": "Industrial Training 4",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "SENG4910",
    "name": "Thesis Part A",
    "url": ""
  },
  {
    "offering_time": "T1",
    "code": "SENG4911",
    "name": "Thesis Part B",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "SENG4906",
    "name": "Industrial Training 3",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "SENG4907",
    "name": "Industrial Training 4",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "SENG4910",
    "name": "Thesis Part A",
    "url": ""
  },
  {
    "offering_time": "T2",
    "code": "SENG4911",
    "name": "Thesis Part B",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "SENG2011",
    "name": "Program Reasoning Workshop",
    "outline": "",
    "url": "https://webcms3.cse.unsw.edu.au/SENG2011/19T3/outline",
    "private": true
  },
  {
    "offering_time": "T3",
    "code": "SENG4906",
    "name": "Industrial Training 3",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "SENG4907",
    "name": "Industrial Training 4",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "SENG4910",
    "name": "Thesis Part A",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "SENG4911",
    "name": "Thesis Part B",
    "url": ""
  },
  {
    "offering_time": "T3",
    "code": "SENG4920",
    "name": "Ethics and Management",
    "url": "https://www.cse.unsw.edu.au/~cs4920/",
    "outline": ""
  }
]
